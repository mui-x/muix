//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v3.0.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
// @inheritedComponent Paper
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import Paper from "../Paper/Paper";
import { capitalize } from "../utils/helpers";
import LinearProgress from "../LinearProgress/LinearProgress";
import { StandardProps } from "..";
import { PaperProps } from "../Paper/Paper";
import { ButtonProps } from "../Button/Button";
import { LinearProgressProps } from "../LinearProgress/LinearProgress";
export interface MobileStepperProps
  extends StandardProps<PaperProps, MobileStepperClassKey> {
  activeStep?: number;
  backButton: React.ReactElement<any>;
  LinearProgressProps?: Partial<LinearProgressProps>;
  nextButton: React.ReactElement<any>;
  position?: "bottom" | "top" | "static";
  steps: number;
  variant?: "text" | "dots" | "progress";
}
export type MobileStepperClassKey =
  | "root"
  | "positionBottom"
  | "positionTop"
  | "positionStatic"
  | "dots"
  | "dot"
  | "dotActive"
  | "progress";

const styles = theme => ({
  /* Styles applied to the root element. */
  root: {
    $web: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-between",
      alignItems: "center",
      background: theme.palette.background.default,
      padding: 8
    }
  },

  /* Styles applied to the root element if `position="bottom"`. */
  positionBottom: {
    $web: {
      position: "fixed",
      bottom: 0,
      left: 0,
      right: 0,
      zIndex: theme.zIndex.mobileStepper
    }
  },

  /* Styles applied to the root element if `position="top"`. */
  positionTop: {
    $web: {
      position: "fixed",
      top: 0,
      left: 0,
      right: 0,
      zIndex: theme.zIndex.mobileStepper
    }
  },

  /* Styles applied to the root element if `position="static"`. */
  positionStatic: {
    $web: {}
  },

  /* Styles applied to the dots container if `variant="dots"`. */
  dots: {
    $web: {
      display: "flex",
      flexDirection: "row"
    }
  },

  /* Styles applied to each dot if `variant="dots"`. */
  dot: {
    $web: {
      backgroundColor: theme.palette.action.disabled,
      borderRadius: "50%",
      width: 8,
      height: 8,
      margin: "0 2px"
    }
  },

  /* Styles applied to a dot if `variant="dots"` and this is the active step. */
  dotActive: {
    $web: {
      backgroundColor: theme.palette.primary.main
    }
  },

  /* Styles applied to the Linear Progress component if `variant="progress"`. */
  progress: {
    $web: {
      width: "50%"
    }
  }
});

const MobileStepper: Types.CodeSFCWeb<Shape> & {
  muiName?: string;
} = props => {
  const {
    activeStep,
    backButton,
    classes,
    className: classNameProp,
    LinearProgressProps,
    nextButton,
    position,
    steps,
    variant,
    ...other
  } = props;
  const className = classNames(
    classes.root,
    classes[`position${capitalize(position)}`],
    classNameProp
  );
  return (
    <Paper square elevation={0} className={className} {...other as any}>
      {backButton}
      {variant === "dots" && (
        <div className={classes.dots}>
          {[...new Array(steps)].map((_, step) => {
            const dotClassName = classNames(
              classes.dot,
              step === activeStep && classes.dotActive
            ); // eslint-disable-next-line react/no-array-index-key

            return <div key={step} className={dotClassName} />;
          })}
        </div>
      )}
      {variant === "progress" && (
        <LinearProgress
          className={classes.progress}
          variant="determinate"
          value={Math.ceil((activeStep / (steps - 1)) * 100)}
          {...LinearProgressProps as any}
        />
      )}
      {nextButton}
    </Paper>
  );
};

export interface Shape extends Types.ShapeDefault {
  common: TCommon.ShapeTexts<MobileStepperClassKey>,
  props: MobileStepperProps
  style: 'Text'
  theme: Theme
}
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = MobileStepper.defaultProps = {
  activeStep: 0,
  position: 'bottom',
  variant: 'dots'
} as CodeProps;
export const MobileStepperCode: CodeComponentType = MobileStepper as any
export const MobileStepperStyles: SheetCreatorX = styles as any
export const MobileStepperCreator: WithStyleCreator = withStyles<Shape>(MobileStepperStyles, MobileStepperCode, {isMui:true, defaultProps});
export const MobileStepperComponent: React.ComponentType<PropsX> = MobileStepperCreator();
if ((MobileStepper as any).muiName) (MobileStepperComponent as any).muiName = (MobileStepper as any).muiName;


export default MobileStepperComponent
