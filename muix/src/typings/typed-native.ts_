import React from 'react'

import {
    NativeMethodsMixin, StyleProp,
    ViewStyle as ViewStyle_, TextStyle as TextStyle_, ImageStyle as ImageStyle_,
    ViewProperties as ViewProperties_, TextProperties as TextProperties_, ImageProperties as ImageProperties_,
    ScrollViewProperties as ScrollViewProperties_
} from 'react-native'

import { $T, $I, $V, TTyped } from 'reactxx-typings'

export namespace TTypedNative {

    type PropsOverride<T, S> = T & { style?: S }

    interface Static<P> extends NativeMethodsMixin, React.ClassicComponentClass<P> { }

    export type ViewStyle = StyleProp<ViewStyle_> | TTyped.TAllowed<$V>
    export type TextStyle = StyleProp<TextStyle_> | TTyped.TAllowed<$T>
    export type ImageStyle = StyleProp<ImageStyle_> | TTyped.TAllowed<$I>

    export type ViewProperties = PropsOverride<ViewProperties_, ViewStyle>
    export type TextProperties = PropsOverride<TextProperties_, TextStyle>
    export type ScrollViewProperties = PropsOverride<ScrollViewProperties_, ViewStyle> & { contentContainerStyle?: ViewStyle }
    export type ImageProperties = PropsOverride<ImageProperties_, ImageStyle>

    export type ViewStatic = Static<ViewProperties>
    export type ScrollViewStatic = Static<ScrollViewProperties>
    export type TextStatic = Static<TextProperties>
    export type ImageStatic = Static<ImageProperties>

    export type RulesetType<TT extends TTyped.NativeIds> =
        TT extends $T ? TTypedNative.TextStyle :
        TT extends $V ? TTypedNative.ViewStyle :
        TT extends $I ? TTypedNative.ImageStyle :
        never


}
