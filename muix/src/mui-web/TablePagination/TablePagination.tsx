//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
// @inheritedComponent TableCell
import React from "react";
import PropTypes from "prop-types";
import Input from "../Input/Input";
import MenuItem from "../MenuItem/MenuItem";
import Select from "../Select/Select";
import TableCell from "../TableCell/TableCell";
import Toolbar from "../Toolbar/Toolbar";
import Typography from "../Typography/Typography";
import TablePaginationActions from "../TablePaginationActions/TablePaginationActions";
import { StandardProps } from "..";
import { TableCellProps } from "../TableCell/TableCell";
import { IconButtonProps } from "../IconButton/IconButton";
import { SelectProps } from "../Select/Select";
export interface LabelDisplayedRowsArgs {
  from: number;
  to: number;
  count: number;
  page: number;
}
export interface TablePaginationProps
  extends StandardProps<TablePaginationBaseProps, TablePaginationClassKey> {
  ActionsComponent?: React.ReactType<TablePaginationBaseProps>;
  backIconButtonProps?: Partial<IconButtonProps>;
  component?: React.ReactType<TablePaginationBaseProps>;
  count: number;
  labelDisplayedRows?: (
    paginationInfo: LabelDisplayedRowsArgs
  ) => React.ReactNode;
  labelRowsPerPage?: React.ReactNode;
  nextIconButtonProps?: Partial<IconButtonProps>;
  onChangePage: (
    event: React.MouseEvent<HTMLButtonElement> | null,
    page: number
  ) => void;
  onChangeRowsPerPage?: React.ChangeEventHandler<
    HTMLTextAreaElement | HTMLInputElement
  >;
  page: number;
  rowsPerPage: number;
  rowsPerPageOptions?: number[];
  SelectProps?: Partial<SelectProps>;
}
export type TablePaginationBaseProps = TableCellProps;
export type TablePaginationClassKey =
  | "root"
  | "toolbar"
  | "spacer"
  | "menuItem"
  | "caption"
  | "input"
  | "selectRoot"
  | "select"
  | "selectIcon"
  | "actions";

const styles = theme => ({
  /* Styles applied to the root element. */
  root: {
    fontSize: theme.typography.pxToRem(12),
    // Increase the specificity to override TableCell.
    "&:last-child": {
      padding: 0
    }
  },

  /* Styles applied to the Toolbar component. */
  toolbar: {
    height: 56,
    minHeight: 56,
    paddingRight: 2
  },

  /* Styles applied to the spacer element. */
  spacer: {
    flex: "1 1 100%"
  },

  /* Styles applied to the caption Typography components if `variant="caption"`. */
  caption: {
    flexShrink: 0
  },

  /* Styles applied to the Select component `root` class. */
  selectRoot: {
    marginRight: 32,
    marginLeft: 8,
    color: theme.palette.text.secondary
  },

  /* Styles applied to the Select component `select` class. */
  select: {
    paddingLeft: 8,
    paddingRight: 16
  },

  /* Styles applied to the Select component `icon` class. */
  selectIcon: {
    top: 1
  },

  /* Styles applied to the Input component. */
  input: {
    fontSize: "inherit",
    flexShrink: 0
  },

  /* Styles applied to the MenuItem component. */
  menuItem: {},

  /* Styles applied to the internal `TablePaginationActions` component. */
  actions: {
    flexShrink: 0,
    color: theme.palette.text.secondary,
    marginLeft: 20
  }
});
/**
 * A `TableCell` based component for placing inside `TableFooter` for pagination.
 */

class TablePagination extends React.Component<CodeProps, any> {
  static defaultProps: CodeProps;
  static muiName;
  static displayName;
  static contextTypes;
  static childContextTypes;
  static options; // This logic would be better handled on userside.
  // However, we have it just in case.

  componentDidUpdate() {
    const { count, onChangePage, page, rowsPerPage } = this.props;
    const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);

    if (page > newLastPage) {
      onChangePage(null, newLastPage);
    }
  }

  render() {
    const {
      $system: { theme },
      ActionsComponent,
      backIconButtonProps,
      classes,
      colSpan: colSpanProp,
      component: Component,
      count,
      labelDisplayedRows,
      labelRowsPerPage,
      nextIconButtonProps,
      onChangePage,
      onChangeRowsPerPage,
      page,
      rowsPerPage,
      rowsPerPageOptions,
      SelectProps,
      ...other
    } = this.props;
    let colSpan;

    if (Component === TableCell || Component === "td") {
      colSpan = colSpanProp || 1000; // col-span over everything
    }

    return (
      <Component className={classes.root} colSpan={colSpan} {...other as any}>
        <Toolbar className={classes.toolbar}>
          <div className={classes.spacer} />
          {rowsPerPageOptions.length > 1 && (
            <Typography variant="caption" className={classes.caption}>
              {labelRowsPerPage}
            </Typography>
          )}
          {rowsPerPageOptions.length > 1 && (
            <Select
              classes={{
                root: classes.selectRoot,
                select: classes.select,
                icon: classes.selectIcon
              }}
              input={<Input className={classes.input} disableUnderline />}
              value={rowsPerPage}
              onChange={onChangeRowsPerPage}
              {...SelectProps as any}
            >
              {rowsPerPageOptions.map(rowsPerPageOption => (
                <MenuItem
                  className={classes.menuItem}
                  key={rowsPerPageOption}
                  value={rowsPerPageOption}
                >
                  {rowsPerPageOption}
                </MenuItem>
              ))}
            </Select>
          )}
          <Typography variant="caption" className={classes.caption}>
            {labelDisplayedRows({
              from: count === 0 ? 0 : page * rowsPerPage + 1,
              to: Math.min(count, (page + 1) * rowsPerPage),
              count,
              page
            })}
          </Typography>
          <ActionsComponent
            className={classes.actions}
            backIconButtonProps={backIconButtonProps}
            count={count}
            nextIconButtonProps={nextIconButtonProps}
            onChangePage={onChangePage}
            page={page}
            rowsPerPage={rowsPerPage}
          />
        </Toolbar>
      </Component>
    );
  }
}

export interface Shape extends Types.ShapeDefault {
  common: TCommon.ShapeTexts<TablePaginationClassKey>,
  props: TablePaginationProps,
  theme: Theme
}
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = TablePagination.defaultProps = {
  ActionsComponent: TablePaginationActions,
  component: TableCell,
  labelDisplayedRows: ({
    from,
    to,
    count
  }) => `${from}-${to} of ${count}`,
  labelRowsPerPage: 'Rows per page:',
  rowsPerPageOptions: [5, 10, 25]
} as CodeProps;
export const TablePaginationCode: CodeComponentType = TablePagination as any
export const TablePaginationStyles: SheetCreatorX = styles as any
export const TablePaginationCreator: WithStyleCreator = withStyles<Shape>(TablePaginationStyles, TablePaginationCode, {isMui:true, defaultProps});
export const TablePaginationComponent: React.ComponentClass<PropsX> = TablePaginationCreator();
if ((TablePagination as any).muiName) (TablePaginationComponent as any).muiName = (TablePagination as any).muiName;


export default TablePaginationComponent
