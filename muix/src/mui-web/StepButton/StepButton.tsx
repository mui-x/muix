//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme } from '../styles/withStyles';
// @inheritedComponent ButtonBase
import React from "react";
import { classNames } from "reactxx-basic";
import ButtonBase from "../ButtonBase/ButtonBase";
import StepLabel from "../StepLabel/StepLabel";
import { isMuiElement } from "../utils/reactHelpers";
import { StandardProps } from "..";
import { Orientation } from "../Stepper/Stepper";
import { ButtonBaseProps } from "../ButtonBase/ButtonBase";
export type StepButtonIcon = React.ReactElement<any> | string | number | null;
export interface StepButtonProps
  extends StandardProps<ButtonBaseProps, StepButtonClasskey> {
  active?: boolean;
  alternativeLabel?: boolean;
  completed?: boolean;
  disabled?: boolean;
  icon?: StepButtonIcon;
  last?: boolean;
  optional?: React.ReactNode;
  orientation?: Orientation;
}
export type StepButtonClasskey = "root" | "vertical" | "touchRipple";
const styles = {
  /* Styles applied to the root element. */
  root: {
    width: "100%",
    padding: "24px 16px",
    margin: "-24px -16px",
    boxSizing: "content-box"
  },

  /* Styles applied to the root element if `orientation="horizontal"`. */
  horizontal: {},

  /* Styles applied to the root element if `orientation="vertical"`. */
  vertical: {
    justifyContent: "flex-start"
  },

  /* Styles applied to the `ButtonBase` touch-ripple. */
  touchRipple: {
    color: "rgba(0, 0, 0, 0.3)"
  }
};

const StepButton: Types.CodeSFCWeb<Shape> = props => {
  const {
    active,
    alternativeLabel,
    children,
    classes,
    className: classNameProp,
    completed,
    disabled,
    icon,
    last,
    optional,
    orientation,
    ...other
  } = props;
  const childProps = {
    active,
    alternativeLabel,
    completed,
    disabled,
    icon,
    optional,
    orientation
  };
  const child = isMuiElement(children, ["StepLabel"]) ? (
    React.cloneElement(children, childProps)
  ) : (
    <StepLabel {...childProps}>{children}</StepLabel>
  );
  return (
    <ButtonBase
      disabled={disabled}
      TouchRippleProps={{
        className: classes.touchRipple
      }}
      className={classNames(classes.root, classes[orientation], classNameProp)}
      {...other}
    >
      {child}
    </ButtonBase>
  );
};

export type Shape = Types.OverwriteShape<{
  
  props: StepButtonProps,
  theme: Theme
}>
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = StepButton.defaultProps = {} as CodeProps;
export const StepButtonCode: CodeComponentType = StepButton as any
export const StepButtonStyles: SheetCreatorX = styles as any
export const StepButtonCreator: WithStyleCreator = withStyles<Shape>(StepButtonStyles, StepButtonCode, {isMui:true, defaultProps});
export const StepButtonComponent: React.ComponentType<PropsX> = StepButtonCreator();
if ((StepButton as any).muiName) (StepButtonComponent as any).muiName = (StepButton as any).muiName;


export default StepButton
