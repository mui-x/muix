//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

// @inheritedComponent EventListener
import React from "react";
import ReactDOM from "react-dom";
import EventListener from "react-event-listener";
import ownerDocument from "../utils/ownerDocument";
export interface ClickAwayListenerProps {
  children: React.ReactNode;
  mouseEvent?: "onClick" | "onMouseDown" | "onMouseUp" | false;
  onClickAway: (event: React.ChangeEvent<{}>) => void;
  touchEvent?: "onTouchStart" | "onTouchEnd" | false;
}
/**
 * Listen for click events that occur somewhere in the document, outside of the element itself.
 * For instance, if you need to hide a menu when people click anywhere else on your page.
 */

interface ClickAwayListenerProps {
  children?;
  [p: string]: any;
}
export type CodeProps = ClickAwayListenerProps;

class ClickAwayListener extends React.Component<CodeProps, any> {
  static defaultProps: CodeProps;
  static muiName;
  static displayName;
  static contextTypes;
  static childContextTypes;
  static options;
  node = null;
  mounted = null;

  componentDidMount() {
    // Finds the first child when a component returns a fragment.
    // https://github.com/facebook/react/blob/036ae3c6e2f056adffc31dfb78d1b6f0c63272f0/packages/react-dom/src/__tests__/ReactDOMFiber-test.js#L105
    this.node = ReactDOM.findDOMNode(this);
    this.mounted = true;
  }

  componentWillUnmount() {
    this.mounted = false;
  }

  handleClickAway = event => {
    // Ignore events that have been `event.preventDefault()` marked.
    if (event.defaultPrevented) {
      return;
    } // IE11 support, which trigger the handleClickAway even after the unbind

    if (!this.mounted) {
      return;
    } // The child might render null.

    if (!this.node) {
      return;
    }

    const doc = ownerDocument(this.node);

    if (
      doc.documentElement &&
      doc.documentElement.contains(event.target) &&
      !this.node.contains(event.target)
    ) {
      this.props.onClickAway(event);
    }
  };

  render() {
    const {
      children,
      mouseEvent,
      touchEvent,
      onClickAway,
      ...other
    } = this.props;
    const listenerProps = {};

    if (mouseEvent !== false) {
      listenerProps[mouseEvent] = this.handleClickAway;
    }

    if (touchEvent !== false) {
      listenerProps[touchEvent] = this.handleClickAway;
    }

    return (
      <EventListener target="document" {...listenerProps} {...other}>
        {children}
      </EventListener>
    );
  }
}

ClickAwayListener.defaultProps = {
  mouseEvent: "onMouseUp",
  touchEvent: "onTouchEnd"
};
export default ClickAwayListener;
