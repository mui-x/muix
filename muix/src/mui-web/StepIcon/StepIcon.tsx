//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v3.0.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import CheckCircle from "../internal/svg-icons/CheckCircle";
import Warning from "../internal/svg-icons/Warning";
import SvgIcon from "../SvgIcon/SvgIcon";
import { StandardProps } from "..";
export interface StepIconProps
  extends StandardProps<
      React.HTMLAttributes<HTMLDivElement>,
      StepIconClasskey
    > {
  active?: boolean;
  completed?: boolean;
  error?: boolean;
  icon: React.ReactNode;
}
export type StepIconClasskey =
  | "root"
  | "text"
  | "active"
  | "completed"
  | "error";

const styles = theme => ({
  /* Styles applied to the root element. */
  root: {
    display: "block",
    color: theme.palette.text.disabled,
    "&.active76": {
      color: theme.palette.primary.main
    },
    "&.completed76": {
      color: theme.palette.primary.main
    },
    "&.error76": {
      color: theme.palette.error.main
    }
  },

  /* Styles applied to the SVG text element. */
  text: {
    fill: theme.palette.primary.contrastText,
    fontSize: theme.typography.caption.fontSize,
    fontFamily: theme.typography.fontFamily
  },

  /* Styles applied to the root element if `active={true}`. */
  active: {
    NAME$active76: true
  },

  /* Styles applied to the root element if `completed={true}`. */
  completed: {
    NAME$completed76: true
  },

  /* Styles applied to the root element if `error={true}`. */
  error: {
    NAME$error76: true
  }
});

const StepIcon: Types.CodeSFCWeb<Shape> & {
  muiName?: string;
} = props => {
  const { completed, icon, active, error, classes } = props;

  if (typeof icon === "number" || typeof icon === "string") {
    if (error) {
      return <Warning className={classNames(classes.root, classes.error)} />;
    }

    if (completed) {
      return (
        <CheckCircle className={classNames(classes.root, classes.completed)} />
      );
    }

    return (
      <SvgIcon className={classNames(classes.root, active && classes.active)}>
        <circle cx="12" cy="12" r="12" />
        <text className={classes.text} x="12" y="16" textAnchor="middle">
          {icon}
        </text>
      </SvgIcon>
    );
  }

  return icon as any;
};

export interface Shape extends Types.ShapeDefault {
  
  props: StepIconProps
  style: 'Text'
  theme: Theme
}
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = StepIcon.defaultProps = {
  active: false,
  completed: false,
  error: false
} as CodeProps;
export const StepIconCode: CodeComponentType = StepIcon as any
export const StepIconStyles: SheetCreatorX = styles as any
export const StepIconCreator: WithStyleCreator = withStyles<Shape>(StepIconStyles, StepIconCode, {isMui:true, defaultProps});
export const StepIconComponent: React.ComponentType<PropsX> = StepIconCreator();
if ((StepIcon as any).muiName) (StepIconComponent as any).muiName = (StepIcon as any).muiName;


export default StepIconComponent
