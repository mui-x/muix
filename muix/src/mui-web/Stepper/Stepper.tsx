//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
// @inheritedComponent Paper
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import Paper from "../Paper/Paper";
import StepConnector from "../StepConnector/StepConnector";
import { StandardProps } from "..";
import { PaperProps } from "../Paper/Paper";
export type Orientation = "horizontal" | "vertical";
export interface StepperProps
  extends StandardProps<PaperProps, StepperClasskey> {
  activeStep?: number;
  alternativeLabel?: boolean;
  children?: React.ReactNode;
  connector?: React.ReactElement<any> | React.ReactNode;
  nonLinear?: boolean;
  orientation?: Orientation;
}
export type StepperClasskey =
  | "root"
  | "horizontal"
  | "vertical"
  | "alternativeLabel";
const styles = {
  /* Styles applied to the root element. */
  root: {
    display: "flex",
    padding: 24
  },

  /* Styles applied to the root element if `orientation="horizontal"`. */
  horizontal: {
    flexDirection: "row",
    alignItems: "center"
  },

  /* Styles applied to the root element if `orientation="vertical"`. */
  vertical: {
    flexDirection: "column"
  },

  /* Styles applied to the root element if `alternativeLabel={true}`. */
  alternativeLabel: {
    alignItems: "flex-start"
  }
};

const Stepper: Types.CodeSFCWeb<Shape> & {
  muiName?: string;
} = props => {
  const {
    activeStep,
    alternativeLabel,
    children,
    classes,
    className: classNameProp,
    connector: connectorProp,
    nonLinear,
    orientation,
    ...other
  } = props;
  const className = classNames(
    classes.root,
    classes[orientation],
    alternativeLabel && classes.alternativeLabel,
    classNameProp
  );
  const connector = React.isValidElement(connectorProp)
    ? React.cloneElement(connectorProp as any, {
        orientation
      })
    : null;
  const childrenArray = React.Children.toArray(children);
  const steps = childrenArray.map((step: any, index) => {
    const controlProps = {
      index,
      orientation,
      active: false,
      completed: false,
      disabled: false,
      last: index + 1 === childrenArray.length,
      alternativeLabel,
      connector: connectorProp
    };

    if (activeStep === index) {
      controlProps.active = true;
    } else if (!nonLinear && activeStep > index) {
      controlProps.completed = true;
    } else if (!nonLinear && activeStep < index) {
      controlProps.disabled = true;
    }

    return [
      !alternativeLabel &&
        connector &&
        index > 0 &&
        React.cloneElement(connector, {
          key: index // eslint-disable-line react/no-array-index-key
        }),
      React.cloneElement(step, {
        ...controlProps,
        ...step.props
      })
    ];
  });
  return (
    <Paper square elevation={0} className={className} {...other as any}>
      {steps}
    </Paper>
  );
};

Stepper.muiName = "Stepper";

export type Shape = Types.OverwriteShape<{
  
  props: StepperProps,
  theme: Theme
}>
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = Stepper.defaultProps = {
  activeStep: 0,
  alternativeLabel: false,
  connector: <StepConnector />,
  nonLinear: false,
  orientation: 'horizontal'
} as CodeProps;
export const StepperCode: CodeComponentType = Stepper as any
export const StepperStyles: SheetCreatorX = styles as any
export const StepperCreator: WithStyleCreator = withStyles<Shape>(StepperStyles, StepperCode, {isMui:true, defaultProps});
export const StepperComponent: React.ComponentType<PropsX> = StepperCreator();
if ((Stepper as any).muiName) (StepperComponent as any).muiName = (Stepper as any).muiName;


export default Stepper
