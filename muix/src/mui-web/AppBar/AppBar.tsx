//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme } from '../styles/withStyles';
// @inheritedComponent Paper
import React from "react";
import { classNames } from "reactxx-basic";
import { capitalize } from "../utils/helpers";
import Paper from "../Paper/Paper";
import { PropTypes, StandardProps } from "..";
import { PaperProps } from "../Paper/Paper";
export interface AppBarProps extends StandardProps<PaperProps, AppBarClassKey> {
  color?: PropTypes.Color;
  position?: "fixed" | "absolute" | "sticky" | "static";
}
export type AppBarClassKey =
  | "root"
  | "positionFixed"
  | "positionAbsolute"
  | "positionSticky"
  | "positionStatic"
  | "colorDefault"
  | "colorPrimary"
  | "colorSecondary";

const styles = theme => {
  const backgroundColorDefault =
    theme.palette.type === "light"
      ? theme.palette.grey[100]
      : theme.palette.grey[900];
  return {
    /* Styles applied to the root element. */
    root: {
      display: "flex",
      flexDirection: "column",
      width: "100%",
      boxSizing: "border-box",
      // Prevent padding issue with the Modal and fixed positioned AppBar.
      zIndex: theme.zIndex.appBar,
      flexShrink: 0
    },

    /* Styles applied to the root element if `position="fixed"`. */
    positionFixed: {
      position: "fixed",
      top: 0,
      left: "auto",
      right: 0
    },

    /* Styles applied to the root element if `position="absolute"`. */
    positionAbsolute: {
      position: "absolute",
      top: 0,
      left: "auto",
      right: 0
    },

    /* Styles applied to the root element if `position="sticky"`. */
    positionSticky: {
      position: "sticky",
      top: 0,
      left: "auto",
      right: 0
    },

    /* Styles applied to the root element if `position="static"`. */
    positionStatic: {
      position: "static"
    },

    /* Styles applied to the root element if `color="default"`. */
    colorDefault: {
      backgroundColor: backgroundColorDefault,
      color: theme.palette.getContrastText(backgroundColorDefault)
    },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText
    },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      backgroundColor: theme.palette.secondary.main,
      color: theme.palette.secondary.contrastText
    }
  };
};

function AppBar(props) {
  const {
    $system: { theme },
    children,
    classes,
    className: classNameProp,
    color,
    position,
    ...other
  } = props;
  const className = classNames(
    classes.root,
    classes[`position${capitalize(position)}`],
    color !== "inherit" && classes[`color${capitalize(color)}`],
    position === "fixed" && "mui-fixed",
    classNameProp
  );
  return (
    <Paper
      square
      component="header"
      elevation={4}
      className={className}
      {...other}
    >
      {children}
    </Paper>
  );
}

export type Shape = Types.OverwriteShape<{
  common: TCommon.ShapeTexts<AppBarClassKey>,
  props: AppBarProps,
  theme: Theme
}>
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = AppBar['defaultProps'] = {
  color: 'primary',
  position: 'fixed'
} as PropsX;
export const AppBarCode: CodeComponentType = AppBar as any
export const AppBarStyles: SheetCreatorX = styles as any
export const AppBarCreator: WithStyleCreator = withStyles<Shape>(AppBarStyles, AppBarCode, {isMui:true, defaultProps});
export const AppBarComponent: React.ComponentType<PropsX> = AppBarCreator();
if ((AppBar as any).muiName) (AppBarComponent as any).muiName = (AppBar as any).muiName;


export default AppBar
