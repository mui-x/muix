//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import React from "react";
import ReactDOM from "react-dom";
import exactProp from "../utils/exactProp";

function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}
/**
 * Helper component to allow attaching a ref to a
 * wrapped element to access the underlying DOM element.
 *
 * It's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.
 * For example:
 * ```jsx
 * import React from 'react';
 * import RootRef from '@material-ui/core/RootRef';export interface RootRefProps<T = any> {
  rootRef?: ((instance: T | null) => void) | React.RefObject<T>;
}
 *
 * class MyComponent extends React.Component {
 *   constructor() {
 *     super(props);
 *     this.domRef = React.createRef();
 *   }
 *
 *   componentDidMount() {
 *     console.log(this.domRef.current); // DOM node
 *   }
 *
 *   render() {
 *     return (
 *       <RootRef rootRef={this.domRef}>
 *         <SomeChildComponent />
 *       </RootRef>
 *     );
 *   }
 * }
 * ```
 */

interface RootRefProps {
  children?;
  [p: string]: any;
}
export type CodeProps = RootRefProps;

class RootRef extends React.Component<CodeProps, any> {
  static defaultProps: CodeProps;
  static muiName;
  static displayName;
  static contextTypes;
  static childContextTypes;
  static options;

  componentDidMount() {
    setRef(this.props.rootRef, ReactDOM.findDOMNode(this));
  }

  componentDidUpdate(prevProps) {
    if (prevProps.rootRef !== this.props.rootRef) {
      setRef(prevProps.rootRef, null);
      setRef(this.props.rootRef, ReactDOM.findDOMNode(this));
    }
  }

  componentWillUnmount() {
    setRef(this.props.rootRef, null);
  }

  render() {
    return this.props.children;
  }
}

export default RootRef;
