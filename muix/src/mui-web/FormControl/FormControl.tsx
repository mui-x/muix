//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import { isFilled, isAdornedStart } from "../Input/Input";
import { capitalize } from "../utils/helpers";
import { isMuiElement } from "../utils/reactHelpers";
import { StandardProps, PropTypes as muiPropTypes } from "..";
export interface FormControlProps
  extends StandardProps<
      React.HtmlHTMLAttributes<HTMLDivElement>,
      FormControlClassKey
    > {
  component?: React.ReactType<FormControlProps>;
  disabled?: boolean;
  error?: boolean;
  fullWidth?: boolean;
  margin?: muiPropTypes.Margin;
  onBlur?: React.EventHandler<any>;
  onFocus?: React.EventHandler<any>;
  required?: boolean;
}
export type FormControlClassKey =
  | "root"
  | "marginNormal"
  | "marginDense"
  | "fullWidth";
const styles = {
  /* Styles applied to the root element. */
  root: {
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    // Reset fieldset default style
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0
  },

  /* Styles applied to the root element if `margin="normal"`. */
  marginNormal: {
    marginTop: 16,
    marginBottom: 8
  },

  /* Styles applied to the root element if `margin="dense"`. */
  marginDense: {
    marginTop: 8,
    marginBottom: 4
  },

  /* Styles applied to the root element if `fullWidth={true}`. */
  fullWidth: {
    width: "100%"
  }
};
/**
 * Provides context such as filled/focused/error/required for form inputs.
 * Relying on the context provides high flexibilty and ensures that the state always stays
 * consistent across the children of the `FormControl`.
 * This context is used by the following components:
 *  - FormLabel
 *  - FormHelperText
 *  - Input
 *  - InputLabel
 */

class FormControl extends React.Component<CodeProps, any> {
  static defaultProps: CodeProps;
  static muiName;
  static displayName;
  static contextTypes;
  static childContextTypes;
  static options;

  constructor(props) {
    super(props); // We need to iterate through the children and find the Input in order
    // to fully support server side rendering.

    const { children } = props;

    if (children) {
      React.Children.forEach(children, (child: React.ReactElement<any>) => {
        if (!isMuiElement(child, ["Input", "Select", "NativeSelect"])) {
          return;
        }

        if (isFilled(child.props, true)) {
          this.state.filled = true;
        }

        const input = isMuiElement(child, ["Select", "NativeSelect"])
          ? child.props.input
          : child;

        if (input && isAdornedStart(input.props)) {
          this.state.adornedStart = true;
        }
      });
    }
  }

  state: any = {
    adornedStart: false,
    filled: false,
    focused: false
  };

  getChildContext() {
    const { disabled, error, required, margin } = this.props;
    const { adornedStart, filled, focused } = this.state;
    return {
      muiFormControl: {
        adornedStart,
        disabled,
        error,
        filled,
        focused,
        margin,
        onBlur: this.handleBlur,
        onEmpty: this.handleClean,
        onFilled: this.handleDirty,
        onFocus: this.handleFocus,
        required
      }
    };
  }

  handleFocus = () => {
    this.setState(
      state =>
        !state.focused
          ? {
              focused: true
            }
          : null
    );
  };
  handleBlur = () => {
    this.setState(
      state =>
        state.focused
          ? {
              focused: false
            }
          : null
    );
  };
  handleDirty = () => {
    if (!this.state.filled) {
      this.setState({
        filled: true
      });
    }
  };
  handleClean = () => {
    if (this.state.filled) {
      this.setState({
        filled: false
      });
    }
  };

  render() {
    const {
      $system: { theme },
      classes,
      className,
      component: Component,
      disabled,
      error,
      fullWidth,
      margin,
      required,
      ...other
    } = this.props;
    return (
      <Component
        className={classNames(
          classes.root,
          margin !== "none" && classes[`margin${capitalize(margin)}`],
          fullWidth && classes.fullWidth,
          className
        )}
        {...other as any}
      />
    );
  }
}

FormControl.childContextTypes = {
  muiFormControl: PropTypes.object
};

export interface Shape extends Types.ShapeDefault {
  common: TCommon.ShapeTexts<FormControlClassKey>,
  props: FormControlProps,
  theme: Theme
}
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = FormControl.defaultProps = {
  component: 'div',
  disabled: false,
  error: false,
  fullWidth: false,
  margin: 'none',
  required: false
} as CodeProps;
export const FormControlCode: CodeComponentType = FormControl as any
export const FormControlStyles: SheetCreatorX = styles as any
export const FormControlCreator: WithStyleCreator = withStyles<Shape>(FormControlStyles, FormControlCode, {isMui:true, defaultProps});
export const FormControlComponent: React.ComponentClass<PropsX> = FormControlCreator();
if ((FormControl as any).muiName) (FormControlComponent as any).muiName = (FormControl as any).muiName;


export default FormControlComponent
