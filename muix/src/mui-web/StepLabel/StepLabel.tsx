//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme } from '../styles/withStyles';
import React from "react";
import { classNames } from "reactxx-basic";
import Typography from "../Typography/Typography";
import StepIcon from "../StepIcon";
import { StandardProps } from "..";
import { Orientation } from "../Stepper";
import { StepButtonIcon } from "../StepButton";
import { StepIconProps } from "../StepIcon";
export interface StepLabelProps
  extends StandardProps<
      React.HTMLAttributes<HTMLDivElement>,
      StepLabelClasskey
    > {
  active?: boolean;
  alternativeLabel?: boolean;
  children: React.ReactNode;
  completed?: boolean;
  disabled?: boolean;
  error?: boolean;
  icon?: StepButtonIcon;
  last?: boolean;
  optional?: React.ReactNode;
  orientation?: Orientation;
  StepIconProps?: Partial<StepIconProps>;
}
export type StepLabelClasskey =
  | "root"
  | "horizontal"
  | "vertical"
  | "active"
  | "completed"
  | "alternativeLabel"
  | "error"
  | "disabled"
  | "label"
  | "iconContainer"
  | "labelContainer";

const styles = theme => ({
  /* Styles applied to the root element. */
  root: {
    display: "flex",
    alignItems: "center",
    "&$alternativeLabel": {
      flexDirection: "column"
    },
    "&$disabled": {
      cursor: "default"
    }
  },

  /* Styles applied to the root element if `orientation="horiizontal". */
  horizontal: {},

  /* Styles applied to the root element if `orientation="vertical". */
  vertical: {},

  /* Styles applied to the `Typography` component which wraps `children`. */
  label: {
    color: theme.palette.text.secondary,
    "&$active": {
      color: theme.palette.text.primary,
      fontWeight: 500
    },
    "&$completed": {
      color: theme.palette.text.primary,
      fontWeight: 500
    },
    "&$alternativeLabel": {
      textAlign: "center",
      marginTop: 16
    },
    "&$error": {
      color: theme.palette.error.main
    }
  },

  /* Styles applied to the `Typography` component if `active={true}`. */
  active: {},

  /* Styles applied to the `Typography` component if `completed={true}`. */
  completed: {},

  /* Styles applied to the root element and `Typography` component if `error={true}`. */
  error: {},

  /* Styles applied to the root element and `Typography` component if `disabled={true}`. */
  disabled: {},

  /* Styles applied to the `icon` container element. */
  iconContainer: {
    paddingRight: 8,
    "&$alternativeLabel": {
      paddingRight: 0
    }
  },

  /* Styles applied to the root & icon container and `Typography` if `alternativeLabel={true}`. */
  alternativeLabel: {},

  /* Styles applied to the container element which wraps `Typography` and `optional`. */
  labelContainer: {
    width: "100%"
  }
});

function StepLabel(props) {
  const {
    $system: { theme },
    active,
    alternativeLabel,
    children,
    classes,
    className: classNameProp,
    completed,
    disabled,
    error,
    icon,
    last,
    optional,
    orientation,
    StepIconProps,
    ...other
  } = props;
  return (
    <span
      className={classNames(
        classes.root,
        classes[orientation],
        disabled && classes.disabled,
        alternativeLabel && classes.alternativeLabel,
        error && classes.error,
        classNameProp
      )}
      {...other}
    >
      {icon && (
        <span
          className={classNames(
            classes.iconContainer,
            alternativeLabel && classes.alternativeLabel
          )}
        >
          <StepIcon
            completed={completed}
            active={active}
            error={error}
            icon={icon}
            {...StepIconProps}
          />
        </span>
      )}
      <span className={classes.labelContainer}>
        <Typography
          variant="body1"
          component="span"
          className={classNames(
            classes.label,
            alternativeLabel && classes.alternativeLabel,
            completed && classes.completed,
            active && classes.active,
            error && classes.error
          )}
        >
          {children}
        </Typography>
        {optional}
      </span>
    </span>
  );
}

StepLabel.muiName = "StepLabel";

export type Shape = Types.OverwriteShape<{
  
  props: StepLabelProps,
  theme: Theme
}>
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = StepLabel['defaultProps'] = {
  active: false,
  alternativeLabel: false,
  completed: false,
  disabled: false,
  error: false,
  last: false,
  orientation: 'horizontal'
} as PropsX;
export const StepLabelCode: CodeComponentType = StepLabel as any
export const StepLabelStyles: SheetCreatorX = styles as any
export const StepLabelCreator: WithStyleCreator = withStyles<Shape>(StepLabelStyles, StepLabelCode, {isMui:true, defaultProps});
export const StepLabelComponent: React.ComponentType<PropsX> = StepLabelCreator();
if ((StepLabel as any).muiName) (StepLabelComponent as any).muiName = (StepLabel as any).muiName;


export default StepLabel
