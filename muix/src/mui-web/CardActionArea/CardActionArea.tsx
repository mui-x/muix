//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v3.0.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
// @inheritedComponent ButtonBase
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import ButtonBase from "../ButtonBase/ButtonBase";
import { StandardProps } from "..";
import { ButtonBaseProps } from "../ButtonBase/ButtonBase";
export interface CardActionAreaProps
  extends StandardProps<ButtonBaseProps, CardActionAreaClassKey> {
  focusVisibleClassName?: string;
}
export type CardActionAreaClassKey = "root" | "focusVisible" | "focusHighlight";

const styles = theme => ({
  /* Styles applied to the root element. */
  root: {
    display: "block",
    textAlign: "inherit",
    "&:hover .focusHighlight12": {
      opacity: theme.palette.action.hoverOpacity
    },
    "&.focusVisible12 .focusHighlight12": {
      opacity: 0.12
    }
  },

  /* Styles applied to the ButtonBase root element if the action area is keyboard focused. */
  focusVisible: {
    NAME$focusVisible12: true
  },

  /* Styles applied to the overlay that covers the action area when it is keyboard focused. */
  focusHighlight: {
    pointerEvents: "none",
    position: "absolute",
    backgroundColor: "currentcolor",
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    opacity: 0,
    transition: theme.transitions.create("opacity", {
      duration: theme.transitions.duration.short
    }),
    NAME$focusHighlight12: true
  }
});

const CardActionArea: Types.CodeSFCWeb<Shape> & {
  muiName?: string;
} = props => {
  const {
    children,
    classes,
    className,
    focusVisibleClassName,
    ...other
  } = props;
  return (
    <ButtonBase
      className={classNames(classes.root, className)}
      focusVisibleClassName={classNames(
        focusVisibleClassName,
        classes.focusVisible
      )}
      {...other as any}
    >
      {children}
      <span className={classes.focusHighlight} />
    </ButtonBase>
  );
};

export interface Shape extends Types.ShapeDefault {
  common: TCommon.ShapeTexts<CardActionAreaClassKey>,
  props: CardActionAreaProps
  style: 'Text'
  theme: Theme
}
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = CardActionArea.defaultProps = {} as CodeProps;
export const CardActionAreaCode: CodeComponentType = CardActionArea as any
export const CardActionAreaStyles: SheetCreatorX = styles as any
export const CardActionAreaCreator: WithStyleCreator = withStyles<Shape>(CardActionAreaStyles, CardActionAreaCode, {isMui:true, defaultProps});
export const CardActionAreaComponent: React.ComponentType<PropsX> = CardActionAreaCreator();
if ((CardActionArea as any).muiName) (CardActionAreaComponent as any).muiName = (CardActionArea as any).muiName;


export default CardActionAreaComponent
