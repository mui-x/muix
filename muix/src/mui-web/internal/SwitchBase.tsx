//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v3.0.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
// @inheritedComponent IconButton
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import IconButton from "../IconButton/IconButton";
import { StandardProps } from "..";
import { IconButtonProps } from "../IconButton/IconButton";
export interface SwitchBaseProps
  extends StandardProps<IconButtonProps, SwitchBaseClassKey, "onChange"> {
  autoFocus?: boolean;
  checked?: boolean | string;
  checkedIcon: React.ReactNode;
  defaultChecked?: boolean;
  disabled?: boolean;
  disableRipple?: boolean;
  icon: React.ReactNode;
  indeterminate?: boolean;
  indeterminateIcon?: React.ReactNode;
  inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
  inputRef?: React.Ref<any>;
  name?: string;
  onChange?: (
    event: React.ChangeEvent<HTMLInputElement>,
    checked: boolean
  ) => void;
  readOnly?: boolean;
  required?: boolean;
  tabIndex?: number;
  value?: string;
}
export type SwitchBaseClassKey = "root" | "checked" | "disabled" | "input";
export interface CreateSwitchBaseOptions {
  defaultIcon?: React.ReactNode;
  defaultCheckedIcon?: React.ReactNode;
  type?: string;
}
const styles = {
  root: {
    display: "inline-flex",
    alignItems: "center",
    transition: "none",
    "&:hover": {
      // Disable the hover effect for the IconButton.
      backgroundColor: "transparent"
    }
  },
  checked: {},
  disabled: {},
  input: {
    cursor: "inherit",
    position: "absolute",
    opacity: 0,
    width: "100%",
    height: "100%",
    top: 0,
    left: 0,
    margin: 0,
    padding: 0
  }
};
/**
 * @ignore - internal component.
 */

class SwitchBase extends React.Component<CodeProps, any> {
  static defaultProps: CodeProps;
  static muiName;
  static displayName;
  static contextTypes;
  static childContextTypes;
  static options;
  input = null;
  isControlled = null;

  constructor(props) {
    super(props);
    this.isControlled = props.checked != null;

    if (!this.isControlled) {
      // not controlled, use internal state
      this.state.checked =
        props.defaultChecked !== undefined ? props.defaultChecked : false;
    }
  }

  state: any = {};
  handleFocus = event => {
    if (this.props.onFocus) {
      this.props.onFocus(event);
    }

    const { muiFormControl } = this.context;

    if (muiFormControl && muiFormControl.onFocus) {
      muiFormControl.onFocus(event);
    }
  };
  handleBlur = event => {
    if (this.props.onBlur) {
      this.props.onBlur(event);
    }

    const { muiFormControl } = this.context;

    if (muiFormControl && muiFormControl.onBlur) {
      muiFormControl.onBlur(event);
    }
  };
  handleInputChange = event => {
    const checked = event.target.checked;

    if (!this.isControlled) {
      this.setState({
        checked
      });
    }

    if (this.props.onChange) {
      this.props.onChange(event, checked);
    }
  };

  render() {
    const {
      $system: { theme },
      autoFocus,
      checked: checkedProp,
      checkedIcon,
      classes,
      className: classNameProp,
      disabled: disabledProp,
      icon,
      id,
      inputProps,
      inputRef,
      name,
      onBlur,
      onChange,
      onFocus,
      readOnly,
      required,
      tabIndex,
      type,
      value,
      ...other
    } = this.props;
    const { muiFormControl } = this.context;
    let disabled = disabledProp;

    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }

    const checked = this.isControlled ? checkedProp : this.state.checked;
    const hasLabelFor = type === "checkbox" || type === "radio";
    return (
      <IconButton
        component="span"
        className={classNames(
          classes.root,
          checked && classes.checked,
          disabled && classes.disabled,
          classNameProp
        )}
        disabled={disabled}
        tabIndex={null}
        role={undefined}
        onFocus={this.handleFocus}
        onBlur={this.handleBlur}
        {...other as any}
      >
        {checked ? checkedIcon : icon}
        <input
          autoFocus={autoFocus}
          checked={checked}
          className={classes.input}
          disabled={disabled}
          id={hasLabelFor && id}
          name={name}
          onChange={this.handleInputChange}
          readOnly={readOnly}
          ref={inputRef}
          required={required}
          tabIndex={tabIndex}
          type={type}
          value={value}
          {...inputProps as any}
        />
      </IconButton>
    );
  }
} // NB: If changed, please update Checkbox, Switch and Radio
// so that the API documentation is updated.

SwitchBase.contextTypes = {
  muiFormControl: PropTypes.object
};

export interface Shape extends Types.ShapeDefault {
  common: TCommon.ShapeTexts<SwitchBaseClassKey>,
  props: SwitchBaseProps,
  theme: Theme
}
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = SwitchBase.defaultProps = {} as CodeProps;
export const SwitchBaseCode: CodeComponentType = SwitchBase as any
export const SwitchBaseStyles: SheetCreatorX = styles as any
export const SwitchBaseCreator: WithStyleCreator = withStyles<Shape>(SwitchBaseStyles, SwitchBaseCode, {isMui:true, defaultProps});
export const SwitchBaseComponent: React.ComponentClass<PropsX> = SwitchBaseCreator();
if ((SwitchBase as any).muiName) (SwitchBaseComponent as any).muiName = (SwitchBase as any).muiName;


export default SwitchBaseComponent
