//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
// @inheritedComponent ButtonBase
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import ButtonBase from "../ButtonBase/ButtonBase";
import unsupportedProp from "../utils/unsupportedProp";
import { StandardProps } from "..";
import { ButtonBaseProps } from "../ButtonBase/ButtonBase";
export interface BottomNavigationActionProps
  extends StandardProps<
      ButtonBaseProps,
      BottomNavigationActionClassKey,
      "onChange"
    > {
  icon?: string | React.ReactElement<any>;
  label?: React.ReactNode;
  onChange?: (event: React.ChangeEvent<{}>, value: any) => void;
  onClick?: React.ReactEventHandler<any>;
  selected?: boolean;
  showLabel?: boolean;
  value?: any;
}
export type BottomNavigationActionClassKey =
  | "root"
  | "selected"
  | "iconOnly"
  | "wrapper"
  | "label";

const styles = theme => ({
  /* Styles applied to the root element. */
  root: {
    transition: theme.transitions.create(["color", "padding-top"], {
      duration: theme.transitions.duration.short
    }),
    paddingTop: 8,
    paddingBottom: 10,
    paddingLeft: 12,
    paddingRight: 12,
    minWidth: 80,
    maxWidth: 168,
    color: theme.palette.text.secondary,
    flex: "1",
    "&$iconOnly": {
      paddingTop: 16
    },
    "&$selected": {
      paddingTop: 6,
      color: theme.palette.primary.main
    }
  },

  /* Styles applied to the root element if selected. */
  selected: {},

  /* Styles applied to the root element if `showLabel={false}` and not selected. */
  iconOnly: {},

  /* Styles applied to the span element that wraps the icon and label. */
  wrapper: {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    width: "100%",
    flexDirection: "column"
  },

  /* Styles applied to the label's span element. */
  label: {
    fontFamily: theme.typography.fontFamily,
    fontSize: theme.typography.pxToRem(12),
    opacity: 1,
    transition: "font-size 0.2s, opacity 0.2s",
    transitionDelay: "0.1s",
    "&$iconOnly": {
      opacity: 0,
      transitionDelay: "0s"
    },
    "&$selected": {
      fontSize: theme.typography.pxToRem(14)
    }
  }
});

class BottomNavigationAction extends React.Component<CodeProps, any> {
  static defaultProps: CodeProps;
  static muiName;
  static displayName;
  static contextTypes;
  static childContextTypes;
  static options;
  handleChange = event => {
    const { onChange, value, onClick } = this.props;

    if (onChange) {
      onChange(event, value);
    }

    if (onClick) {
      onClick(event);
    }
  };

  render() {
    const {
      $system: { theme },
      classes,
      className: classNameProp,
      icon,
      label,
      onChange,
      onClick,
      selected,
      showLabel: showLabelProp,
      value,
      ...other
    } = this.props;
    const className = classNames(
      classes.root,
      selected && classes.selected,
      !showLabelProp && !selected && classes.iconOnly,
      classNameProp
    );
    const labelClassName = classNames(
      classes.label,
      selected && classes.selected,
      !showLabelProp && !selected && classes.iconOnly
    );
    return (
      <ButtonBase
        className={className}
        focusRipple
        onClick={this.handleChange}
        {...other as any}
      >
        <span className={classes.wrapper}>
          {icon}
          <span className={labelClassName}>{label}</span>
        </span>
      </ButtonBase>
    );
  }
}

export type Shape = Types.OverwriteShape<{
  common: TCommon.ShapeTexts<BottomNavigationActionClassKey>,
  props: BottomNavigationActionProps,
  theme: Theme
}>
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = BottomNavigationAction.defaultProps = {} as CodeProps;
export const BottomNavigationActionCode: CodeComponentType = BottomNavigationAction as any
export const BottomNavigationActionStyles: SheetCreatorX = styles as any
export const BottomNavigationActionCreator: WithStyleCreator = withStyles<Shape>(BottomNavigationActionStyles, BottomNavigationActionCode, {isMui:true, defaultProps});
export const BottomNavigationActionComponent: React.ComponentClass<PropsX> = BottomNavigationActionCreator();
if ((BottomNavigationAction as any).muiName) (BottomNavigationActionComponent as any).muiName = (BottomNavigationAction as any).muiName;


export default BottomNavigationActionComponent
