//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme } from '../styles/withStyles';
import React from "react";
import { classNames } from "reactxx-basic";
import { cloneChildrenWithClassName } from "../utils/reactHelpers";
import "../Button/Button"; // So we don't have any override priority issue.

import { StandardProps } from "..";
export interface CardActionsProps
  extends StandardProps<
      React.HTMLAttributes<HTMLDivElement>,
      CardActionsClassKey
    > {
  disableActionSpacing?: boolean;
}
export type CardActionsClassKey = "root" | "action";

const styles = theme => ({
  /* Styles applied to the root element. */
  root: {
    display: "flex",
    alignItems: "center",
    boxSizing: "border-box",
    padding: "8px 4px",
    [theme.breakpoints.up("sm")]: {
      padding: "8px 12px"
    }
  },

  /* Styles applied to the children. */
  action: {
    margin: "0 4px"
  }
});

const CardActions: Types.CodeSFCWeb<Shape> = props => {
  const {
    disableActionSpacing,
    children,
    classes,
    className,
    ...other
  } = props;
  return (
    <div className={classNames(classes.root, className)} {...other}>
      {disableActionSpacing
        ? children
        : cloneChildrenWithClassName(children, classes.action)}
    </div>
  );
};

export type Shape = Types.OverwriteShape<{
  common: TCommon.ShapeTexts<CardActionsClassKey>,
  props: CardActionsProps,
  theme: Theme
}>
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = CardActions.defaultProps = {
  disableActionSpacing: false
} as CodeProps;
export const CardActionsCode: CodeComponentType = CardActions as any
export const CardActionsStyles: SheetCreatorX = styles as any
export const CardActionsCreator: WithStyleCreator = withStyles<Shape>(CardActionsStyles, CardActionsCode, {isMui:true, defaultProps});
export const CardActionsComponent: React.ComponentType<PropsX> = CardActionsCreator();
if ((CardActions as any).muiName) (CardActionsComponent as any).muiName = (CardActions as any).muiName;


export default CardActions
