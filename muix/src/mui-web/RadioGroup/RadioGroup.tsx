//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

// @inheritedComponent FormGroup
import React from "react";
import PropTypes from "prop-types";
import warning from "warning";
import FormGroup from "../FormGroup/FormGroup";
import { createChainedFunction, find } from "../utils/helpers";
import { StandardProps } from "..";
import { FormGroupProps, FormGroupClassKey } from "../FormGroup/FormGroup";
export interface RadioGroupProps
  extends StandardProps<FormGroupProps, RadioGroupClassKey, "onChange"> {
  name?: string;
  onChange?: (event: React.ChangeEvent<{}>, value: string) => void;
  value?: string;
}
export type RadioGroupClassKey = FormGroupClassKey;

class RadioGroup extends React.Component<RadioGroupProps, any> {
  static defaultProps: RadioGroupProps;
  static muiName;
  static displayName;
  static contextTypes;
  static childContextTypes;
  static options;
  radios = [];
  focus = () => {
    if (!this.radios || !this.radios.length) {
      return;
    }

    const focusRadios = this.radios.filter(n => !n.disabled);

    if (!focusRadios.length) {
      return;
    }

    const selectedRadio = find(focusRadios, n => n.checked);

    if (selectedRadio) {
      selectedRadio.focus();
      return;
    }

    focusRadios[0].focus();
  };
  handleRadioChange = (event, checked) => {
    if (checked && this.props.onChange) {
      this.props.onChange(event, event.target.value);
    }
  };

  render() {
    const { children, name, value, onChange, ...other } = this.props;
    this.radios = [];
    return (
      <FormGroup role="radiogroup" {...other as any}>
        {React.Children.map(children, (child: React.ReactElement<any>) => {
          if (!(React as any).isValidElement(child)) {
            return null;
          }

          warning(
            child.type !== React.Fragment,
            [
              "Material-UI: the RadioGroup component doesn't accept a Fragment as a child.",
              "Consider providing an array instead."
            ].join("\n")
          );
          return React.cloneElement(child, {
            name,
            inputRef: node => {
              if (node) {
                this.radios.push(node);
              }
            },
            checked: value === child.props.value,
            onChange: createChainedFunction(
              child.props.onChange,
              this.handleRadioChange
            )
          });
        })}
      </FormGroup>
    );
  }
}

export default RadioGroup;
