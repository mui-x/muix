//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v3.0.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import KeyboardArrowLeft from "../internal/svg-icons/KeyboardArrowLeft";
import KeyboardArrowRight from "../internal/svg-icons/KeyboardArrowRight";
import ButtonBase from "../ButtonBase/ButtonBase";
import { StandardProps } from "..";
import { ButtonBaseProps } from "../ButtonBase/ButtonBase";
export interface TabScrollButtonProps
  extends StandardProps<ButtonBaseProps, TabScrollButtonClassKey> {
  direction?: "left" | "right";
  visible?: boolean;
}
export type TabScrollButtonClassKey = "root";
const styles = {
  /* Styles applied to the root element. */
  root: {
    color: "inherit",
    flex: "0 0 56px"
  }
};
/**
 * @ignore - internal component.
 */

const TabScrollButton: Types.CodeSFCWeb<Shape> & {
  muiName?: string;
} = props => {
  const {
    classes,
    className: classNameProp,
    direction,
    onClick,
    visible,
    ...other
  } = props;
  const className = classNames(classes.root, classNameProp);

  if (!visible) {
    return <div className={className} />;
  }

  return (
    <ButtonBase
      className={className}
      onClick={onClick}
      tabIndex={-1}
      {...other as any}
    >
      {direction === "left" ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}
    </ButtonBase>
  );
};

export interface Shape extends Types.ShapeDefault {
  common: TCommon.ShapeTexts<TabScrollButtonClassKey>,
  props: TabScrollButtonProps
  style: 'Text'
  theme: Theme
}
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = TabScrollButton.defaultProps = {
  visible: true
} as CodeProps;
export const TabScrollButtonCode: CodeComponentType = TabScrollButton as any
export const TabScrollButtonStyles: SheetCreatorX = styles as any
export const TabScrollButtonCreator: WithStyleCreator = withStyles<Shape>(TabScrollButtonStyles, TabScrollButtonCode, {isMui:true, defaultProps});
export const TabScrollButtonComponent: React.ComponentType<PropsX> = TabScrollButtonCreator();
if ((TabScrollButton as any).muiName) (TabScrollButtonComponent as any).muiName = (TabScrollButton as any).muiName;


export default TabScrollButtonComponent
