//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme } from '../styles/withStyles';
import React from "react";
import warning from "warning";
import { keys as breakpointKeys } from "../styles/createBreakpoints";
import { capitalize } from "../utils/helpers";
import { Breakpoint } from "../styles/createBreakpoints";
export interface HiddenCssProps {
  lgDown?: boolean;
  lgUp?: boolean;
  mdDown?: boolean;
  mdUp?: boolean;
  only?: Breakpoint | Array<Breakpoint>;
  smDown?: boolean;
  smUp?: boolean;
  xlDown?: boolean;
  xlUp?: boolean;
  xsDown?: boolean;
  xsUp?: boolean;
}

const styles = theme => {
  const hidden = {
    display: "none"
  };
  return breakpointKeys.reduce((acc, key) => {
    acc[`only${capitalize(key)}`] = {
      [theme.breakpoints.only(key)]: hidden
    };
    acc[`${key}Up`] = {
      [theme.breakpoints.up(key)]: hidden
    };
    acc[`${key}Down`] = {
      [theme.breakpoints.down(key)]: hidden
    };
    return acc;
  }, {});
};
/**
 * @ignore - internal component.
 */

function HiddenCss(props) {
  const {
    $system: { theme },
    children,
    classes,
    className,
    lgDown,
    lgUp,
    mdDown,
    mdUp,
    only,
    smDown,
    smUp,
    xlDown,
    xlUp,
    xsDown,
    xsUp,
    ...other
  } = props;
  warning(
    Object.keys(other).length === 0 ||
      (Object.keys(other).length === 1 && other.hasOwnProperty("ref")),
    `Material-UI: unsupported properties received ${Object.keys(other).join(
      ", "
    )} by \`<Hidden />\`.`
  );
  const classNames = [];

  if (className) {
    classNames.push(className);
  }

  for (let i = 0; i < breakpointKeys.length; i += 1) {
    const breakpoint = breakpointKeys[i];
    const breakpointUp = props[`${breakpoint}Up`];
    const breakpointDown = props[`${breakpoint}Down`];

    if (breakpointUp) {
      classNames.push(classes[`${breakpoint}Up`]);
    }

    if (breakpointDown) {
      classNames.push(classes[`${breakpoint}Down`]);
    }
  }

  if (only) {
    const onlyBreakpoints = Array.isArray(only) ? only : [only];
    onlyBreakpoints.forEach(breakpoint => {
      classNames.push(classes[`only${capitalize(breakpoint)}`]);
    });
  }

  return <div className={classNames.join(" ")}>{children}</div>;
}

export type Shape = Types.OverwriteShape<{
  
  props: HiddenCssProps,
  theme: Theme
}>
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = HiddenCss['defaultProps'] = {} as PropsX;
export const HiddenCssCode: CodeComponentType = HiddenCss as any
export const HiddenCssStyles: SheetCreatorX = styles as any
export const HiddenCssCreator: WithStyleCreator = withStyles<Shape>(HiddenCssStyles, HiddenCssCode, {isMui:true, defaultProps});
export const HiddenCssComponent: React.ComponentType<PropsX> = HiddenCssCreator();
if ((HiddenCss as any).muiName) (HiddenCssComponent as any).muiName = (HiddenCss as any).muiName;


export default HiddenCss
