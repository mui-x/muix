//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v3.0.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import warning from "warning";
import { StandardProps } from "..";
export interface PaperProps
  extends StandardProps<React.HTMLAttributes<HTMLDivElement>, PaperClassKey> {
  component?: React.ReactType<PaperProps>;
  elevation?: number;
  square?: boolean;
}
export type PaperClassKey =
  | "root"
  | "rounded"
  | "elevation0"
  | "elevation1"
  | "elevation2"
  | "elevation3"
  | "elevation4"
  | "elevation5"
  | "elevation6"
  | "elevation7"
  | "elevation8"
  | "elevation9"
  | "elevation10"
  | "elevation11"
  | "elevation12"
  | "elevation13"
  | "elevation14"
  | "elevation15"
  | "elevation16"
  | "elevation17"
  | "elevation18"
  | "elevation19"
  | "elevation20"
  | "elevation21"
  | "elevation22"
  | "elevation23"
  | "elevation24";

const styles = theme => {
  const elevations = {};
  theme.shadows.forEach((shadow, index) => {
    elevations[`elevation${index}`] = {
      boxShadow: shadow
    };
  });
  return {
    /* Styles applied to the root element. */
    root: {
      backgroundColor: theme.palette.background.paper
    },

    /* Styles applied to the root element if `square={false}`. */
    rounded: {
      borderRadius: theme.shape.borderRadius
    },
    ...elevations
  };
};

const Paper: Types.CodeSFCWeb<Shape> & {
  muiName?: string;
} = props => {
  const {
    classes,
    className: classNameProp,
    component: Component,
    square,
    elevation,
    ...other
  } = props;
  warning(
    elevation >= 0 && elevation < 25,
    `Material-UI: this elevation \`${elevation}\` is not implemented.`
  );
  const className = classNames(
    classes.root,
    classes[`elevation${elevation}`],
    !square && classes.rounded,
    classNameProp
  );
  return <Component className={className} {...other as any} />;
};

export interface Shape extends Types.ShapeDefault {
  common: TCommon.ShapeTexts<PaperClassKey>,
  props: PaperProps,
  theme: Theme
}
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = Paper.defaultProps = {
  component: 'div',
  elevation: 2,
  square: false
} as CodeProps;
export const PaperCode: CodeComponentType = Paper as any
export const PaperStyles: SheetCreatorX = styles as any
export const PaperCreator: WithStyleCreator = withStyles<Shape>(PaperStyles, PaperCode, {isMui:true, defaultProps});
export const PaperComponent: React.ComponentType<PropsX> = PaperCreator();
if ((Paper as any).muiName) (PaperComponent as any).muiName = (Paper as any).muiName;


export default PaperComponent
