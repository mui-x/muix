//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme } from '../styles/withStyles';
// @inheritedComponent Paper
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import Paper from "../Paper/Paper";
import Typography from "../Typography/Typography";
import { emphasize } from "../styles/colorManipulator";
import { StandardProps } from "..";
import { PaperProps } from "../Paper/Paper";
export interface SnackbarContentProps
  extends StandardProps<PaperProps, SnackbarContentClassKey> {
  action?: React.ReactElement<any>;
  message: React.ReactElement<any> | string;
}
export type SnackbarContentClassKey = "root" | "message" | "action";

const styles = theme => {
  const emphasis = theme.palette.type === "light" ? 0.8 : 0.98;
  const backgroundColor = emphasize(theme.palette.background.default, emphasis);
  return {
    /* Styles applied to the root element. */
    root: {
      color: theme.palette.getContrastText(backgroundColor),
      backgroundColor,
      display: "flex",
      alignItems: "center",
      flexWrap: "wrap",
      padding: "6px 24px",
      [theme.breakpoints.up("md")]: {
        minWidth: 288,
        maxWidth: 568,
        borderRadius: theme.shape.borderRadius
      },
      [theme.breakpoints.down("sm")]: {
        flexGrow: 1
      }
    },

    /* Styles applied to the message wrapper element. */
    message: {
      padding: "8px 0"
    },

    /* Styles applied to the action wrapper element if `action` is provided. */
    action: {
      display: "flex",
      alignItems: "center",
      marginLeft: "auto",
      paddingLeft: 24,
      marginRight: -8
    }
  };
};

const SnackbarContent: Types.CodeSFCWeb<Shape> = props => {
  const { action, classes, className, message, ...other } = props;
  return (
    <Paper
      component={Typography}
      headlineMapping={{
        body1: "div"
      }}
      role="alertdialog"
      square
      elevation={6}
      className={classNames(classes.root, className)}
      {...other as any}
    >
      <div className={classes.message}>{message}</div>
      {action ? <div className={classes.action}>{action}</div> : null}
    </Paper>
  );
};

export type Shape = Types.OverwriteShape<{
  common: TCommon.ShapeTexts<SnackbarContentClassKey>,
  props: SnackbarContentProps,
  theme: Theme
}>
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = SnackbarContent.defaultProps = {} as CodeProps;
export const SnackbarContentCode: CodeComponentType = SnackbarContent as any
export const SnackbarContentStyles: SheetCreatorX = styles as any
export const SnackbarContentCreator: WithStyleCreator = withStyles<Shape>(SnackbarContentStyles, SnackbarContentCode, {isMui:true, defaultProps});
export const SnackbarContentComponent: React.ComponentType<PropsX> = SnackbarContentCreator();
if ((SnackbarContent as any).muiName) (SnackbarContentComponent as any).muiName = (SnackbarContent as any).muiName;


export default SnackbarContent
