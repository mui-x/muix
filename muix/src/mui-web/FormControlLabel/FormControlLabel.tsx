//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v1.5.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
/* eslint-disable jsx-a11y/label-has-for */
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import Typography from "../Typography/Typography";
import { StandardProps } from "..";
export interface FormControlLabelProps
  extends StandardProps<
      React.LabelHTMLAttributes<HTMLLabelElement>,
      FormControlLabelClassKey,
      "onChange"
    > {
  checked?: boolean | string;
  control: React.ReactElement<any>;
  disabled?: boolean;
  inputRef?: React.Ref<any>;
  label: React.ReactNode;
  name?: string;
  onChange?: (event: React.ChangeEvent<{}>, checked: boolean) => void;
  labelPlacement?: "end" | "start";
  value?: string;
}
export type FormControlLabelClassKey = "root" | "start" | "disabled" | "label";

const styles = theme => ({
  /* Styles applied to the root element. */
  root: {
    display: "inline-flex",
    alignItems: "center",
    cursor: "pointer",
    // For correct alignment with the text.
    verticalAlign: "middle",
    // Remove grey highlight
    WebkitTapHighlightColor: "transparent",
    marginLeft: -14,
    marginRight: 16,
    // used for row presentation of radio/checkbox
    "&$disabled": {
      cursor: "default"
    }
  },

  /* Styles applied to the root element if `labelPlacement="start"`. */
  labelPlacementStart: {
    flexDirection: "row-reverse"
  },

  /* Styles applied to the root element if `disabled={true}`. */
  disabled: {},

  /* Styles applied to the label's Typography component. */
  label: {
    "&$disabled": {
      color: theme.palette.text.disabled
    }
  }
});
/**
 * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.
 * Use this component if you want to display an extra label.
 */

const FormControlLabel: Types.CodeSFCWeb<Shape> = (props, context) => {
  const {
    checked,
    classes,
    className: classNameProp,
    control,
    disabled: disabledProp,
    inputRef,
    label,
    labelPlacement,
    name,
    onChange,
    value,
    ...other
  } = props;
  const { muiFormControl } = context;
  let disabled = disabledProp;

  if (
    typeof disabled === "undefined" &&
    typeof control.props.disabled !== "undefined"
  ) {
    disabled = control.props.disabled;
  }

  if (typeof disabled === "undefined" && muiFormControl) {
    disabled = muiFormControl.disabled;
  }

  const controlProps = {
    disabled
  };
  ["checked", "name", "onChange", "value", "inputRef"].forEach(key => {
    if (
      typeof control.props[key] === "undefined" &&
      typeof props[key] !== "undefined"
    ) {
      controlProps[key] = props[key];
    }
  });
  return (
    <label
      className={classNames(
        classes.root,
        labelPlacement === "start" && classes.labelPlacementStart,
        disabled && classes.disabled,
        classNameProp
      )}
      {...other as any}
    >
      {React.cloneElement(control, controlProps)}
      <Typography
        component="span"
        className={classNames(classes.label, disabled && classes.disabled)}
      >
        {label}
      </Typography>
    </label>
  );
};

FormControlLabel.contextTypes = {
  muiFormControl: PropTypes.object
};

export interface Shape extends Types.ShapeDefault {
  common: TCommon.ShapeTexts<FormControlLabelClassKey>,
  props: FormControlLabelProps,
  theme: Theme
}
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = FormControlLabel.defaultProps = {
  labelPlacement: 'end'
} as CodeProps;
export const FormControlLabelCode: CodeComponentType = FormControlLabel as any
export const FormControlLabelStyles: SheetCreatorX = styles as any
export const FormControlLabelCreator: WithStyleCreator = withStyles<Shape>(FormControlLabelStyles, FormControlLabelCode, {isMui:true, defaultProps});
export const FormControlLabelComponent: React.ComponentType<PropsX> = FormControlLabelCreator();
if ((FormControlLabel as any).muiName) (FormControlLabelComponent as any).muiName = (FormControlLabel as any).muiName;


export default FormControlLabelComponent
