//autogenerated--------------------------------------------------------------------
// 
// This code was generated from material-ui v3.0.0 by reactxx-codemod tool
// (https://github.com/reactxx/reactxx/tree/master/codemod)
// 
//----------------------------------------------------------------------------------

import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import withStyles, { Theme, toAtomic } from '../styles/withStyles';
import React from "react";
import PropTypes from "prop-types";
import { classNames } from "reactxx-basic";
import SwitchBase from "../internal/SwitchBase";
import RadioButtonUncheckedIcon from "../internal/svg-icons/RadioButtonUnchecked";
import RadioButtonCheckedIcon from "../internal/svg-icons/RadioButtonChecked";
import { capitalize } from "../utils/helpers";
import { StandardProps } from "..";
import { SwitchBaseProps, SwitchBaseClassKey } from "../internal/SwitchBase";
export interface RadioProps
  extends StandardProps<
      SwitchBaseProps,
      RadioClassKey,
      "checkedIcon" | "color" | "icon"
    > {
  checkedIcon?: React.ReactNode;
  color?: "primary" | "secondary" | "default";
  icon?: React.ReactNode;
}
export type RadioClassKey =
  | SwitchBaseClassKey
  | "colorPrimary"
  | "colorSecondary";

const styles = theme => ({
  /* Styles applied to the root element. */
  root: {
    color: theme.palette.text.secondary
  },

  /* Styles applied to the root element if `checked={true}`. */
  checked: {
    NAME$checked67: true
  },

  /* Styles applied to the root element if `disabled={true}`. */
  disabled: {
    NAME$disabled67: true
  },

  /* Styles applied to the root element if `color="primary"`. */
  colorPrimary: {
    "&.checked67": {
      color: theme.palette.primary.main
    },
    "&.disabled67": {
      color: theme.palette.action.disabled
    }
  },

  /* Styles applied to the root element if `color="secondary"`. */
  colorSecondary: {
    "&.checked67": {
      color: theme.palette.secondary.main
    },
    "&.disabled67": {
      color: theme.palette.action.disabled
    }
  }
});

const Radio: Types.CodeSFCWeb<Shape> & {
  muiName?: string;
} = props => {
  const { classes, color, ...other } = props;
  return (
    <SwitchBase
      type="radio"
      icon={<RadioButtonUncheckedIcon />}
      checkedIcon={<RadioButtonCheckedIcon />}
      classes={{
        root: classNames(classes.root, classes[`color${capitalize(color)}`]),
        checked: classes.checked,
        disabled: classes.disabled
      }}
      {...other as any}
    />
  );
};

export interface Shape extends Types.ShapeDefault {
  common: TCommon.ShapeTexts<RadioClassKey>,
  props: RadioProps
  style: 'Text'
  theme: Theme
}
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type CodeProps = Types.CodePropsWeb<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export const defaultProps  = Radio.defaultProps = {
  color: 'secondary'
} as CodeProps;
export const RadioCode: CodeComponentType = Radio as any
export const RadioStyles: SheetCreatorX = styles as any
export const RadioCreator: WithStyleCreator = withStyles<Shape>(RadioStyles, RadioCode, {isMui:true, defaultProps});
export const RadioComponent: React.ComponentType<PropsX> = RadioCreator();
if ((Radio as any).muiName) (RadioComponent as any).muiName = (Radio as any).muiName;


export default RadioComponent
