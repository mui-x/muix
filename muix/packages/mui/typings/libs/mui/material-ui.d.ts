/**
 * This code was generated by a tool from https://github.com/mui-org/material-ui.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
*/

declare namespace Muix {


  //************* mui/material-ui/styles/createGenerateClassName


  interface GenerateClassNameOptions {
    dangerouslyUseGlobalCSS?: boolean;
    productionPrefix?: string;
  }


  //************* mui/material-ui/styles/createBreakpoints
  type Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';

  type BreakpointValues = {[key in Breakpoint]: number };


  interface Breakpoints {
    keys: Breakpoint[];
    values: BreakpointValues;
    up: (key: Breakpoint | number) => string;
    down: (key: Breakpoint | number) => string;
    between: (start: Breakpoint, end: Breakpoint) => string;
    only: (key: Breakpoint) => string;
    width: (key: Breakpoint) => number;
  }


  type BreakpointsOptions = Partial<
    {
      unit: string;
      step: number;
    } & Breakpoints
    >;


  //************* mui/material-ui/styles/spacing
  interface Spacing {
    unit: number;
  }


  type SpacingOptions = Partial<Spacing>;


  //************* mui/material-ui/styles/createMixins


  interface Mixins {
    gutters: (styles: React.CSSProperties) => React.CSSProperties;
    toolbar: React.CSSProperties;
    // ... use interface declaration merging to add custom mixins
  }


  interface MixinsOptions extends Partial<Mixins> {
    // ... use interface declaration merging to add custom mixin options
  }


  //************* mui/material-ui/colors/common
  interface CommonColors {
    black: string;
    white: string;
  }


  //************* mui/material-ui/styles/createPalette


  interface TypeText {
    primary: string;
    secondary: string;
    disabled: string;
    hint: string;
  }


  interface TypeAction {
    active: string;
    hover: string;
    selected: string;
    disabled: string;
    disabledBackground: string;
  }


  interface TypeBackground {
    default: string;
    paper: string;
  }


  type PaletteColorOptions = SimplePaletteColorOptions | Partial<Color>;


  interface SimplePaletteColorOptions {
    light?: string;
    main: string;
    dark?: string;
    contrastText?: string;
  }


  interface PaletteColor {
    light: string;
    main: string;
    dark: string;
    contrastText: string;
  }


  interface TypeObject {
    text: TypeText;
    action: TypeAction;
    background: TypeBackground;
  }


  interface Palette {
    common: CommonColors;
    type: PaletteType;
    contrastThreshold: number;
    tonalOffset: number;
    primary: PaletteColor;
    secondary: PaletteColor;
    error: PaletteColor;
    grey: Color;
    text: TypeText;
    divider: string;
    action: TypeAction;
    background: TypeBackground;
    getContrastText: (color: string) => string;
  }


  type PartialTypeObject = {[P in keyof TypeObject]?: Partial<TypeObject[P]> };

  type ColorPartial = Partial<Color>;


  interface PaletteOptions {
    common?: Partial<CommonColors>;
    type?: PaletteType;
    primary?: PaletteColorOptions;
    secondary?: PaletteColorOptions;
    error?: PaletteColorOptions;
    grey?: ColorPartial;
    text?: Partial<TypeText>;
    divider?: string;
    action?: Partial<TypeAction>;
    background?: Partial<TypeBackground>;
    getContrastText?: (color: string) => string;
  }


  //************* mui/material-ui/styles/shadows
  type Shadows = [
    'none',
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ];


  //************* mui/material-ui/styles/transitions
  interface Easing {
    easeInOut: string;
    easeOut: string;
    easeIn: string;
    sharp: string;
  }


  interface Duration {
    shortest: number;
    shorter: number;
    short: number;
    standard: number;
    complex: number;
    enteringScreen: number;
    leavingScreen: number;
  }


  interface Transitions {
    easing: Easing;
    duration: Duration;
    create(
      props: string | string[],
      options?: Partial<{ duration: number; easing: string; delay: number }>,
    ): string;
    getAutoHeightDuration(height: number): number;
  }


  interface TransitionsOptions {
    easing?: Partial<Easing>;
    duration?: Partial<Duration>;
    create?: (
      props: string | string[],
      options?: Partial<{ duration: number; easing: string; delay: number }>,
    ) => string;
    getAutoHeightDuration?: (height: number) => number;
  }


  //************* mui/material-ui/styles/createTypography


  type TextStyle =
    | 'display1'
    | 'display2'
    | 'display3'
    | 'display4'
    | 'headline'
    | 'title'
    | 'subheading'
    | 'body1'
    | 'body2'
    | 'caption';


  type Style = TextStyle | 'button';


  interface FontStyle {
    fontFamily: React.CSSProperties['fontFamily'];
    fontSize: React.CSSProperties['fontSize'];
    fontWeightLight: React.CSSProperties['fontWeight'];
    fontWeightRegular: React.CSSProperties['fontWeight'];
    fontWeightMedium: React.CSSProperties['fontWeight'];
    htmlFontSize?: number;
  }


  interface TypographyStyle {
    color?: React.CSSProperties['color'];
    fontFamily: React.CSSProperties['fontFamily'];
    fontSize: React.CSSProperties['fontSize'];
    fontWeight: React.CSSProperties['fontWeight'];
    letterSpacing?: React.CSSProperties['letterSpacing'];
    lineHeight?: React.CSSProperties['lineHeight'];
    textTransform?: React.CSSProperties['textTransform'];
  }


  interface TypographyUtils {
    pxToRem: (px: number) => string;
  }


  type Typography = Record<Style, TypographyStyle> & FontStyle & TypographyUtils;


  type TypographyOptions = Partial<Record<Style, Partial<TypographyStyle>> & FontStyle>;


  //************* mui/material-ui/styles/zIndex
  interface ZIndex {
    mobileStepper: number;
    appBar: number;
    drawer: number;
    modal: number;
    snackbar: number;
    tooltip: number;
  }


  type ZIndexOptions = Partial<ZIndex>;


  //************* mui/material-ui/Paper/Paper


  interface PaperProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, PaperClassKey> {
    component?: React.ReactType<PaperProps>;
    elevation?: number;
    square?: boolean;
  }


  type PaperClassKey =
    | 'root'
    | 'rounded'
    | 'shadow0'
    | 'shadow1'
    | 'shadow2'
    | 'shadow3'
    | 'shadow4'
    | 'shadow5'
    | 'shadow6'
    | 'shadow7'
    | 'shadow8'
    | 'shadow9'
    | 'shadow10'
    | 'shadow11'
    | 'shadow12'
    | 'shadow13'
    | 'shadow14'
    | 'shadow15'
    | 'shadow16'
    | 'shadow17'
    | 'shadow18'
    | 'shadow19'
    | 'shadow20'
    | 'shadow21'
    | 'shadow22'
    | 'shadow23'
    | 'shadow24';


  //************* mui/material-ui/Paper/index


  //************* mui/material-ui/AppBar/AppBar


  interface AppBarProps extends StandardProps<PaperProps, AppBarClassKey> {
    color?: PropTypes.Color;
    position?: 'fixed' | 'absolute' | 'sticky' | 'static';
  }


  type AppBarClassKey =
    | PaperClassKey
    | 'positionFixed'
    | 'positionAbsolute'
    | 'positionSticky'
    | 'positionStatic'
    | 'colorDefault'
    | 'colorPrimary'
    | 'colorSecondary';


  //************* mui/material-ui/Avatar/Avatar


  interface AvatarProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, AvatarClassKey> {
    alt?: string;
    childrenClassName?: string;
    component?: React.ReactType<AvatarProps>;
    imgProps?: React.HtmlHTMLAttributes<HTMLImageElement>;
    sizes?: string;
    src?: string;
    srcSet?: string;
  }


  type AvatarClassKey = 'root' | 'colorDefault' | 'img';


  //************* mui/material-ui/internal/transition


  type TransitionDuration = number | { enter: number; exit: number };

  type TransitionCallback = (element: HTMLElement) => void;


  interface TransitionHandlers {
    onEnter: TransitionCallback;
    onEntering: TransitionCallback;
    onEntered: TransitionCallback;
    onExit: TransitionCallback;
    onExiting: TransitionCallback;
    onExited: TransitionCallback;
  }


  interface TransitionProps extends Partial<TransitionHandlers> {
    children: React.ReactElement<any> | Function;
    style?: React.CSSProperties;
    className?: string;
    in: boolean;
    appear?: boolean;
    unmountOnExit?: boolean;
  }


  //************* mui/material-ui/transitions/Fade


  interface FadeProps extends TransitionProps {
    theme?: Theme;
    timeout?: TransitionDuration;
  }


  //************* mui/material-ui/Modal/Backdrop


  interface BackdropProps
    extends StandardProps<
    React.HTMLAttributes<HTMLDivElement> & Partial<FadeProps>,
    BackdropClassKey
    > {
    invisible?: boolean;
    onClick?: React.ReactEventHandler<{}>;
    open: boolean;
    transitionDuration?: TransitionDuration;
  }


  type BackdropClassKey = 'root' | 'invisible';


  //************* mui/material-ui/Badge/Badge


  interface BadgeProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, BadgeClassKey> {
    badgeContent: React.ReactNode;
    children: React.ReactNode;
    color?: PropTypes.Color | 'error';
    component?: React.ReactType<BadgeProps>;
  }


  type BadgeClassKey = 'root' | 'badge' | 'colorPrimary' | 'colorSecondary';


  //************* mui/material-ui/BottomNavigation/BottomNavigation


  interface BottomNavigationProps
    extends StandardProps<
    React.HTMLAttributes<HTMLDivElement>,
    BottomNavigationClassKey,
    'onChange'
    > {
    children: React.ReactNode;
    onChange?: (event: React.ChangeEvent<{}>, value: any) => void;
    showLabels?: boolean;
    value?: any;
  }


  type BottomNavigationClassKey = 'root';


  //************* mui/material-ui/ButtonBase/ButtonBase


  interface ButtonBaseProps
    extends StandardProps<
    React.AnchorHTMLAttributes<HTMLElement> & React.ButtonHTMLAttributes<HTMLElement>,
    ButtonBaseClassKey
    > {
    buttonRef?: React.Ref<any>;
    centerRipple?: boolean;
    component?: React.ReactType<ButtonBaseProps>;
    disableRipple?: boolean;
    focusRipple?: boolean;
    keyboardFocusedClassName?: string;
    onKeyboardFocus?: React.FocusEventHandler<any>;
  }


  type ButtonBaseClassKey = 'root' | 'disabled';


  //************* mui/material-ui/ButtonBase/index


  //************* mui/material-ui/BottomNavigation/BottomNavigationAction


  interface BottomNavigationActionProps
    extends StandardProps<ButtonBaseProps, BottomNavigationActionClassKey, 'onChange'> {
    icon?: string | React.ReactElement<any>;
    label?: React.ReactNode;
    onChange?: (event: React.ChangeEvent<{}>, value: any) => void;
    onClick?: React.ReactEventHandler<any>;
    selected?: boolean;
    showLabel?: boolean;
    value?: any;
  }


  type BottomNavigationActionClassKey =
    | ButtonBaseClassKey
    | 'selected'
    | 'selectedIconOnly'
    | 'wrapper'
    | 'label'
    | 'selectedLabel'
    | 'hiddenLabel';


  //************* mui/material-ui/Button/Button


  interface ButtonProps extends StandardProps<ButtonBaseProps, ButtonClassKey, 'component'> {
    color?: PropTypes.Color;
    component?: React.ReactType<ButtonProps>;
    disabled?: boolean;
    disableFocusRipple?: boolean;
    disableRipple?: boolean;
    fullWidth?: boolean;
    href?: string;
    mini?: boolean;
    size?: 'small' | 'medium' | 'large';
    type?: string;
    variant?: 'flat' | 'raised' | 'fab';
  }


  type ButtonClassKey =
    | ButtonBaseClassKey
    | 'dense'
    | 'label'
    | 'flatPrimary'
    | 'flatSecondary'
    | 'colorInherit'
    | 'raised'
    | 'keyboardFocused'
    | 'raisedPrimary'
    | 'raisedSecondary'
    | 'fab';


  //************* mui/material-ui/Card/Card


  interface CardProps extends StandardProps<PaperProps, CardClassKey> {
    raised?: boolean;
  }


  type CardClassKey = PaperClassKey;


  //************* mui/material-ui/Card/CardActions


  interface CardActionsProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, CardActionsClassKey> {
    disableActionSpacing?: boolean;
  }


  type CardActionsClassKey = 'root' | 'action';


  //************* mui/material-ui/Card/CardContent


  interface CardContentProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, CardContentClassKey> {
    component?: React.ReactType<CardContentProps>;
  }


  type CardContentClassKey = 'root';


  //************* mui/material-ui/Card/CardHeader


  interface CardHeaderProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, CardHeaderClassKey, 'title'> {
    action?: React.ReactNode;
    avatar?: React.ReactNode;
    component?: React.ReactType<CardHeaderProps>;
    subheader?: React.ReactNode;
    title?: React.ReactNode;
  }


  type CardHeaderClassKey = 'root' | 'avatar' | 'content' | 'title' | 'subheader';


  //************* mui/material-ui/Card/CardMedia


  interface CardMediaProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, CardMediaClassKey> {
    component?: React.ReactType<CardMediaProps>;
    image?: string;
    src?: string;
  }


  type CardMediaClassKey = 'root';


  //************* mui/material-ui/IconButton/IconButton


  interface IconButtonProps extends StandardProps<ButtonBaseProps, IconButtonClassKey> {
    color?: PropTypes.Color;
    disabled?: boolean;
    disableRipple?: boolean;
  }


  type IconButtonClassKey =
    | ButtonBaseClassKey
    | 'colorPrimary'
    | 'colorSecondary'
    | 'colorInherit'
    | 'label'
    | 'icon';


  //************* mui/material-ui/IconButton/index


  //************* mui/material-ui/internal/SwitchBase


  interface SwitchBaseProps
    extends StandardProps<IconButtonProps, SwitchBaseClassKey, 'onChange'> {
    checked?: boolean | string;
    checkedClassName?: string;
    checkedIcon?: React.ReactNode;
    defaultChecked?: boolean;
    disabled?: boolean;
    disabledClassName?: string;
    disableRipple?: boolean;
    icon?: React.ReactNode;
    indeterminate?: boolean;
    indeterminateIcon?: React.ReactNode;
    inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
    inputRef?: React.Ref<any>;
    name?: string;
    onChange?: (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => void;
    tabIndex?: number;
    value?: string;
  }


  type SwitchBaseClassKey = 'root' | 'default' | 'checked' | 'disabled' | 'input';


  type SwitchBase = React.Component<SwitchBaseProps>;


  interface CreateSwitchBaseOptions {
    defaultIcon?: React.ReactNode;
    defaultCheckedIcon?: React.ReactNode;
    inputType?: string;
  }


  //************* mui/material-ui/Checkbox/Checkbox


  interface CheckboxProps extends StandardProps<SwitchBaseProps, CheckboxClassKey> { }


  type CheckboxClassKey = SwitchBaseClassKey;


  //************* mui/material-ui/Chip/Chip


  interface ChipProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, ChipClassKey> {
    avatar?: React.ReactElement<any>;
    component?: React.ReactType<ChipProps>;
    deleteIcon?: React.ReactElement<any>;
    label?: React.ReactNode;
    onDelete?: React.EventHandler<any>;
    onKeyDown?: React.EventHandler<React.KeyboardEvent<any>>;
  }


  type ChipClassKey =
    | 'root'
    | 'clickable'
    | 'deletable'
    | 'avatar'
    | 'avatarChildren'
    | 'label'
    | 'deleteIcon';


  //************* mui/material-ui/Progress/CircularProgress


  interface CircularProgressProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, CircularProgressClassKey> {
    color?: 'primary' | 'secondary' | 'inherit';
    max?: number;
    min?: number;
    size?: number | string;
    thickness?: number;
    value?: number;
    variant?: 'determinate' | 'indeterminate';
  }


  type CircularProgressClassKey =
    | 'root'
    | 'colorPrimary'
    | 'colorSecondary'
    | 'svg'
    | 'indeterminateSvg'
    | 'circle'
    | 'indeterminateCircle'
    | 'determinateCircle';


  //************* mui/material-ui/transitions/Collapse


  interface CollapseProps
    extends StandardProps<TransitionProps, CollapseClassKey, 'children'> {
    children?: React.ReactNode;
    collapsedHeight?: string;
    component?: React.ReactType<CollapseProps>;
    theme?: Theme;
    timeout?: TransitionDuration | 'auto';
  }


  type CollapseClassKey = 'container' | 'entered';


  //************* mui/material-ui/Dialog/DialogActions


  interface DialogActionsProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, DialogActionsClassKey> { }


  type DialogActionsClassKey = 'root' | 'action' | 'button';


  //************* mui/material-ui/Portal/Portal


  interface PortalProps {
    children: React.ReactElement<any>;
    container?: React.ReactInstance | (() => React.ReactInstance);
    onRendered?: () => void;
  }


  //default class Portal extends React.Component<PortalProps> {}


  //************* mui/material-ui/Portal/index


  //************* mui/material-ui/Modal/Modal


  interface ModalProps
    extends StandardProps<
    React.HtmlHTMLAttributes<HTMLDivElement> & Partial<PortalProps>,
    ModalClassKey
    > {
    BackdropComponent?: React.ReactType<BackdropProps>;
    BackdropProps?: BackdropProps;
    disableAutoFocus?: boolean;
    disableBackdropClick?: boolean;
    disableEnforceFocus?: boolean;
    disableEscapeKeyDown?: boolean;
    disableRestoreFocus?: boolean;
    hideBackdrop?: boolean;
    keepMounted?: boolean;
    manager?: ModalManager;
    onBackdropClick?: React.ReactEventHandler<{}>;
    onClose?: React.ReactEventHandler<{}>;
    onEscapeKeyDown?: React.ReactEventHandler<{}>;
    open: boolean;
  }


  type ModalClassKey = 'root' | 'hidden';


  //************* mui/material-ui/Modal/ModalManager
  interface ModalManager {
    constructor(opts?: { hideSiblingNodes?: boolean; handleContainerOverflow?: boolean });
    add(modal: any, container: any): number;
    remove(modal: any): void;
    isTopModal(modal: any): boolean;
  }


  //************* mui/material-ui/Modal/index


  //************* mui/material-ui/Dialog/Dialog


  interface DialogProps
    extends StandardProps<ModalProps & Partial<TransitionHandlers>, DialogClassKey, 'children'> {
    children?: React.ReactNode;
    fullScreen?: boolean;
    fullWidth?: boolean;
    maxWidth?: 'xs' | 'sm' | 'md' | false;
    transition?: React.ReactType;
    transitionDuration?: TransitionDuration;
  }


  type DialogClassKey =
    | ModalClassKey
    | 'root'
    | 'paper'
    | 'paperWidthXs'
    | 'paperWidthSm'
    | 'paperWidthMd'
    | 'fullWidth'
    | 'fullScreen';


  //************* mui/material-ui/Dialog/DialogContent


  interface DialogContentProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, DialogContentClassKey> { }


  type DialogContentClassKey = 'root';


  //************* mui/material-ui/Dialog/DialogContentText


  interface DialogContentTextProps
    extends StandardProps<React.HTMLAttributes<HTMLParagraphElement>, DialogContentTextClassKey> { }


  type DialogContentTextClassKey = 'root';


  //************* mui/material-ui/Dialog/DialogTitle


  interface DialogTitleProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, DialogTitleClassKey> {
    disableTypography?: boolean;
  }


  type DialogTitleClassKey = 'root';


  //************* mui/material-ui/Divider/Divider


  interface DividerProps
    extends StandardProps<React.HTMLAttributes<HTMLHRElement>, DividerClassKey> {
    absolute?: boolean;
    component?: React.ReactType<DividerProps>;
    inset?: boolean;
    light?: boolean;
  }


  type DividerClassKey = 'root' | 'default' | 'inset' | 'light' | 'absolute';


  //************* mui/material-ui/transitions/Slide


  interface SlideProps extends TransitionProps {
    direction: 'left' | 'right' | 'up' | 'down';
    theme?: Theme;
    timeout?: TransitionDuration;
  }


  //************* mui/material-ui/Drawer/Drawer


  interface DrawerProps
    extends StandardProps<
    ModalProps & Partial<TransitionHandlers>,
    DrawerClassKey,
    'open' | 'children'
    > {
    anchor?: 'left' | 'top' | 'right' | 'bottom';
    children?: React.ReactNode;
    elevation?: number;
    ModalProps?: Partial<ModalProps>;
    open?: boolean;
    PaperProps?: Partial<PaperProps>;
    SlideProps?: Partial<SlideProps>;
    theme?: Theme;
    transitionDuration?: TransitionDuration;
    variant?: 'permanent' | 'persistent' | 'temporary';
  }


  type DrawerClassKey =
    | ModalClassKey
    | 'docked'
    | 'paper'
    | 'paperAnchorLeft'
    | 'paperAnchorRight'
    | 'paperAnchorTop'
    | 'paperAnchorBottom'
    | 'paperAnchorDockedLeft'
    | 'paperAnchorDockedTop'
    | 'paperAnchorDockedRight'
    | 'paperAnchorDockedBottom'
    | 'modal';


  //************* mui/material-ui/Form/FormControl


  interface FormControlProps
    extends StandardProps<React.HtmlHTMLAttributes<HTMLDivElement>, FormControlClassKey> {
    component?: React.ReactType<FormControlProps>;
    disabled?: boolean;
    error?: boolean;
    fullWidth?: boolean;
    margin?: PropTypes.Margin;
    onBlur?: React.EventHandler<any>;
    onFocus?: React.EventHandler<any>;
    required?: boolean;
  }


  type FormControlClassKey = 'root' | 'marginNormal' | 'marginDense' | 'fullWidth';


  //************* mui/material-ui/Form/FormControlLabel


  interface FormControlLabelProps
    extends StandardProps<
    React.LabelHTMLAttributes<HTMLLabelElement>,
    FormControlLabelClassKey,
    'onChange'
    > {
    checked?: boolean | string;
    control: React.ReactElement<any>;
    disabled?: boolean;
    inputRef?: React.Ref<any>;
    label: React.ReactNode;
    name?: string;
    onChange?: (event: React.ChangeEvent<{}>, checked: boolean) => void;
    value?: string;
  }


  type FormControlLabelClassKey = 'root' | 'disabled' | 'label';


  //************* mui/material-ui/Form/FormGroup


  interface FormGroupProps
    extends StandardProps<React.HtmlHTMLAttributes<HTMLDivElement>, FormGroupClassKey> {
    row?: boolean;
  }


  type FormGroupClassKey = 'root' | 'row';


  //************* mui/material-ui/Form/FormHelperText


  interface FormHelperTextProps
    extends StandardProps<React.HTMLAttributes<HTMLParagraphElement>, FormHelperTextClassKey> {
    disabled?: boolean;
    error?: boolean;
    margin?: 'dense';
  }


  type FormHelperTextClassKey = 'root' | 'dense' | 'error' | 'disabled';


  //************* mui/material-ui/Form/FormLabel


  interface FormLabelProps extends StandardProps<FormLabelBaseProps, FormLabelClassKey> {
    component?: React.ReactType<FormLabelBaseProps>;
    disabled?: boolean;
    error?: boolean;
    focused?: boolean;
    required?: boolean;
  }


  type FormLabelBaseProps = React.LabelHTMLAttributes<HTMLLabelElement>;


  type FormLabelClassKey = 'root' | 'focused' | 'error' | 'disabled';


  //************* mui/material-ui/Hidden/Hidden


  interface HiddenProps extends StandardProps<{}, never> {
    implementation?: 'js' | 'css';
    initialWidth?: Breakpoint;
    lgDown?: boolean;
    lgUp?: boolean;
    mdDown?: boolean;
    mdUp?: boolean;
    only?: Breakpoint | Array<Breakpoint>;
    smDown?: boolean;
    smUp?: boolean;
    xlDown?: boolean;
    xlUp?: boolean;
    xsDown?: boolean;
    xsUp?: boolean;
  }


  //************* mui/material-ui/Grid/Grid


  type GridItemsAlignment = 'flex-start' | 'center' | 'flex-end' | 'stretch' | 'baseline';


  type GridContentAlignment =
    | 'stretch'
    | 'center'
    | 'flex-start'
    | 'flex-end'
    | 'space-between'
    | 'space-around';


  type GridDirection = 'row' | 'row-reverse' | 'column' | 'column-reverse';


  type GridSpacing = 0 | 8 | 16 | 24 | 40;


  type GridJustification =
    | 'flex-start'
    | 'center'
    | 'flex-end'
    | 'space-between'
    | 'space-around';


  type GridWrap = 'nowrap' | 'wrap' | 'wrap-reverse';


  type GridSize = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;


  interface GridProps
    extends StandardProps<
    React.HTMLAttributes<HTMLElement> & Partial<Record<Breakpoint, boolean | GridSize>>,
    GridClassKey,
    'hidden'
    > {
    alignContent?: GridContentAlignment;
    alignItems?: GridItemsAlignment;
    component?: string | React.ComponentType<Omit<GridProps, StrippedProps>>;
    container?: boolean;
    direction?: GridDirection;
    hidden?: HiddenProps;
    item?: boolean;
    justify?: GridJustification;
    spacing?: GridSpacing;
    wrap?: GridWrap;
  }


  type GridClassKey =
    | 'typeContainer'
    | 'typeItem'
    | 'direction-xs-column'
    | 'direction-xs-column-reverse'
    | 'direction-xs-row-reverse'
    | 'wrap-xs-nowrap'
    | 'wrap-xs-wrap-reverse'
    | 'align-items-xs-center'
    | 'align-items-xs-flex-start'
    | 'align-items-xs-flex-end'
    | 'align-items-xs-baseline'
    | 'align-content-xs-center'
    | 'align-content-xs-flex-start'
    | 'align-content-xs-flex-end'
    | 'align-content-xs-space-between'
    | 'align-content-xs-space-around'
    | 'justify-xs-center'
    | 'justify-xs-flex-end'
    | 'justify-xs-space-between'
    | 'justify-xs-space-around'
    | 'spacing-xs-8'
    | 'spacing-xs-16'
    | 'spacing-xs-24'
    | 'spacing-xs-40'
    | 'grid-xs'
    | 'grid-xs-1'
    | 'grid-xs-2'
    | 'grid-xs-3'
    | 'grid-xs-4'
    | 'grid-xs-5'
    | 'grid-xs-6'
    | 'grid-xs-7'
    | 'grid-xs-8'
    | 'grid-xs-9'
    | 'grid-xs-10'
    | 'grid-xs-11'
    | 'grid-xs-12';


  type StrippedProps =
    | 'classes'
    | 'className'
    | 'component'
    | 'container'
    | 'item'
    | 'alignContent'
    | 'alignItems'
    | 'direction'
    | 'spacing'
    | 'hidden'
    | 'justify'
    | 'wrap'
    | 'xs'
    | 'sm'
    | 'md'
    | 'lg'
    | 'xl';


  //************* mui/material-ui/GridList/GridList


  interface GridListProps
    extends StandardProps<React.HTMLAttributes<HTMLUListElement>, GridListClassKey> {
    cellHeight?: number | 'auto';
    cols?: number;
    component?: React.ReactType<GridListProps>;
    spacing?: number;
  }


  type GridListClassKey = 'root';


  //************* mui/material-ui/GridList/GridListTileBar


  interface GridListTileBarProps extends StandardProps<{}, GridListTileBarClassKey> {
    actionIcon?: React.ReactNode;
    actionPosition?: 'left' | 'right';
    subtitle?: React.ReactNode;
    title?: React.ReactNode;
    titlePosition?: 'top' | 'bottom';
  }


  type GridListTileBarClassKey =
    | 'root'
    | 'rootBottom'
    | 'rootTop'
    | 'rootWithSubtitle'
    | 'titleWrap'
    | 'titleWrapActionLeft'
    | 'titleWrapActionRight'
    | 'title'
    | 'subtitle'
    | 'actionIconPositionLeft'
    | 'childImg';


  //************* mui/material-ui/GridList/GridListTile


  interface GridListTileProps
    extends StandardProps<React.HTMLAttributes<HTMLLIElement>, GridListTileClassKey> {
    cols?: number;
    component?: React.ReactType<GridListTileProps>;
    rows?: number;
  }


  type GridListTileClassKey = 'root' | 'tile' | 'imgFullHeight' | 'imgFullWidth';


  //************* mui/material-ui/Icon/Icon


  interface IconProps
    extends StandardProps<React.HTMLAttributes<HTMLSpanElement>, IconClassKey> {
    color?: PropTypes.Color | 'action' | 'disabled' | 'error';
  }


  type IconClassKey =
    | 'root'
    | 'colorSecondary'
    | 'colorAction'
    | 'colorDisabled'
    | 'colorError'
    | 'colorPrimary'
    | 'fontSize';


  //************* mui/material-ui/Input/InputAdornment


  interface InputAdornmentProps extends StandardProps<{}, InputAdornmentClassKey> {
    component?: React.ReactType<InputAdornmentProps>;
    disableTypography?: boolean;
    position: 'start' | 'end';
  }


  type InputAdornmentClassKey = 'root' | 'positionStart' | 'positionEnd';


  //************* mui/material-ui/Input/Input


  interface InputProps
    extends StandardProps<
    React.HTMLAttributes<HTMLDivElement>,
    InputClassKey,
    'onChange' | 'onKeyUp' | 'onKeyDown' | 'defaultValue'
    > {
    autoComplete?: string;
    autoFocus?: boolean;
    defaultValue?: string | number;
    disabled?: boolean;
    disableUnderline?: boolean;
    endAdornment?: React.ReactNode;
    error?: boolean;
    fullWidth?: boolean;
    id?: string;
    inputComponent?: React.ReactType<InputProps>;
    inputProps?:
    | React.TextareaHTMLAttributes<HTMLTextAreaElement>
    | React.InputHTMLAttributes<HTMLInputElement>;
    inputRef?: React.Ref<any>;
    margin?: 'dense';
    multiline?: boolean;
    name?: string;
    placeholder?: string;
    rows?: string | number;
    rowsMax?: string | number;
    startAdornment?: React.ReactNode;
    type?: string;
    value?: Array<string | number> | string | number;
    onClean?: () => void;
    onDirty?: () => void;
	  /**
	   * `onChange`, `onKeyUp` + `onKeyDown` are applied to the inner `InputComponent`,
	   * which by default is an input or textarea. Since these handlers differ from the
	   * ones inherited by `React.HTMLAttributes<HTMLDivElement>` we need to omit them.
	   *
	   * Note that  `blur` and `focus` event handler are applied to the outter `<div>`.
	   * So these can just be inherited from the native `<div>`.
	   */
    onChange?: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLTextAreaElement | HTMLInputElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLTextAreaElement | HTMLInputElement>;
  }


  type InputClassKey =
    | 'root'
    | 'formControl'
    | 'inkbar'
    | 'error'
    | 'input'
    | 'inputDense'
    | 'disabled'
    | 'focused'
    | 'underline'
    | 'multiline'
    | 'inputDisabled'
    | 'inputSingleline'
    | 'inputSearch'
    | 'inputMultiline'
    | 'fullWidth';


  //************* mui/material-ui/styles/withStyles


	/**
	 * This is basically the API of JSS. It defines a Map<string, CSS>,
	 * where
	 *
	 * - the `keys` are the class (names) that will be created
	 * - the `values` are objects that represent CSS rules (`React.CSSProperties`).
	 */
  type StyleRules<ClassKey extends string = string> = Record<ClassKey, React.CSSProperties>;


  type StyleRulesCallback<ClassKey extends string = string> = (
    theme: Theme,
  ) => StyleRules<ClassKey>;


  interface StylesCreator {
    create(theme: Theme, name: string): StyleRules;
    options: { index: number };
    themingEnabled: boolean;
  }


  interface WithStylesOptions {
    flip?: boolean;
    withTheme?: boolean;
    name?: string;
  }


  type ClassNameMap<ClassKey extends string = string> = Record<ClassKey, string>;


  interface WithStyles<ClassKey extends string = string> {
    classes: ClassNameMap<ClassKey>;
    theme?: Theme;
  }


  interface StyledComponentProps<ClassKey extends string = string> {
    classes?: Partial<ClassNameMap<ClassKey>>;
    innerRef?: React.Ref<any>;
  }


  //************* mui/material-ui/Input/InputLabel


  interface InputLabelProps extends StandardProps<FormLabelProps, InputLabelClassKey> {
    disableAnimation?: boolean;
    disabled?: boolean;
    error?: boolean;
    FormControlClasses?: Partial<ClassNameMap<FormLabelClassKey>>;
    focused?: boolean;
    required?: boolean;
    shrink?: boolean;
  }


  type InputLabelClassKey =
    | FormLabelClassKey
    | 'formControl'
    | 'labelDense'
    | 'shrink'
    | 'animated';


  //************* mui/material-ui/Progress/LinearProgress


  interface LinearProgressProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, LinearProgressClassKey> {
    color?: 'primary' | 'secondary';
    value?: number;
    valueBuffer?: number;
    variant?: 'determinate' | 'indeterminate' | 'buffer' | 'query';
  }


  type LinearProgressClassKey =
    | 'root'
    | 'primaryColor'
    | 'primaryColorBar'
    | 'primaryDashed'
    | 'secondaryColor'
    | 'secondaryColorBar'
    | 'secondaryDashed'
    | 'bar'
    | 'dashed'
    | 'bufferBar2'
    | 'rootBuffer'
    | 'rootQuery'
    | 'indeterminateBar1'
    | 'indeterminateBar2'
    | 'determinateBar1'
    | 'bufferBar1';


  //************* mui/material-ui/List/List


  interface ListProps
    extends StandardProps<React.HTMLAttributes<HTMLUListElement>, ListClassKey> {
    component?: React.ReactType<ListProps>;
    dense?: boolean;
    disablePadding?: boolean;
    subheader?: React.ReactElement<any>;
  }


  type ListClassKey = 'root' | 'padding' | 'dense' | 'subheader';


  //************* mui/material-ui/List/ListItemAvatar


  interface ListItemAvatarProps extends StandardProps<{}, ListItemAvatarClassKey> { }


  type ListItemAvatarClassKey = 'root' | 'icon';


  //************* mui/material-ui/List/ListItem


  interface ListItemProps
    extends StandardProps<
    ButtonBaseProps & React.LiHTMLAttributes<HTMLElement>,
    ListItemClassKey,
    'component'
    > {
    button?: boolean;
    component?: React.ReactType<ListItemProps>;
    dense?: boolean;
    disabled?: boolean;
    disableGutters?: boolean;
    divider?: boolean;
  }


  type ListItemClassKey =
    | ButtonBaseClassKey
    | 'container'
    | 'keyboardFocused'
    | 'default'
    | 'dense'
    | 'divider'
    | 'gutters'
    | 'button'
    | 'secondaryAction';


  //************* mui/material-ui/List/ListItemIcon


  interface ListItemIconProps extends StandardProps<{}, ListItemIconClassKey> { }


  type ListItemIconClassKey = 'root';


  //************* mui/material-ui/List/ListItemSecondaryAction


  interface ListItemSecondaryActionProps
    extends StandardProps<{}, ListItemSecondaryActionClassKey> { }


  type ListItemSecondaryActionClassKey = 'root';


  //************* mui/material-ui/List/ListItemText


  interface ListItemTextProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, ListItemTextClassKey> {
    disableTypography?: boolean;
    inset?: boolean;
    primary?: React.ReactNode;
    secondary?: React.ReactNode;
  }


  type ListItemTextClassKey =
    | 'root'
    | 'inset'
    | 'dense'
    | 'primary'
    | 'secondary'
    | 'textDense';


  //************* mui/material-ui/List/ListSubheader


  interface ListSubheaderProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, ListSubheaderClassKey> {
    component?: React.ReactType<ListSubheaderProps>;
    color?: 'default' | 'primary' | 'inherit';
    inset?: boolean;
    disableSticky?: boolean;
  }


  type ListSubheaderClassKey = 'root' | 'colorPrimary' | 'colorInherit' | 'inset' | 'sticky';


  //************* mui/material-ui/Popover/Popover


  interface PopoverOrigin {
    horizontal: 'left' | 'center' | 'right' | number;
    vertical: 'top' | 'center' | 'bottom' | number;
  }


  interface PopoverPosition {
    top: number;
    left: number;
  }


  type PopoverReference = 'anchorEl' | 'anchorPosition';


  interface PopoverProps
    extends StandardProps<ModalProps & Partial<TransitionHandlers>, PopoverClassKey, 'children'> {
    action?: (actions: PopoverActions) => void;
    anchorEl?: HTMLElement;
    anchorOrigin?: PopoverOrigin;
    anchorPosition?: PopoverPosition;
    anchorReference?: PopoverReference;
    children?: React.ReactNode;
    elevation?: number;
    getContentAnchorEl?: (element: HTMLElement) => HTMLElement;
    marginThreshold?: number;
    modal?: boolean;
    PaperProps?: Partial<PaperProps>;
    role?: string;
    transformOrigin?: PopoverOrigin;
    transition?: React.ReactType;
    transitionDuration?: TransitionDuration;
  }


  type PopoverClassKey = ModalClassKey | 'paper';


  interface PopoverActions {
    updatePosition(): void;
  }


  //************* mui/material-ui/Popover/index


  //************* mui/material-ui/List/index


  //************* mui/material-ui/Menu/MenuList


  interface MenuListProps extends StandardProps<ListProps, MenuListClassKey, 'onKeyDown'> {
    onKeyDown?: React.ReactEventHandler<React.KeyboardEvent<any>>;
  }


  type MenuListClassKey = ListClassKey;


  //************* mui/material-ui/Menu/Menu


  interface MenuProps
    extends StandardProps<PopoverProps & Partial<TransitionHandlers>, MenuClassKey> {
    anchorEl?: HTMLElement;
    MenuListProps?: MenuListProps;
    transitionDuration?: TransitionDuration;
  }


  type MenuClassKey = PopoverClassKey | 'root';


  //************* mui/material-ui/Menu/MenuItem


  interface MenuItemProps extends StandardProps<ListItemProps, MenuItemClassKey> {
    component?: React.ReactType<MenuItemProps>;
    role?: string;
    selected?: boolean;
  }


  type MenuItemClassKey = ListItemClassKey | 'selected';


  //************* mui/material-ui/Button/index


  //************* mui/material-ui/MobileStepper/MobileStepper


  interface MobileStepperProps extends StandardProps<PaperProps, MobileStepperClassKey> {
    activeStep?: number;
    backButton: React.ReactElement<any>;
    nextButton: React.ReactElement<any>;
    position?: 'bottom' | 'top' | 'static';
    steps: number;
    variant?: 'text' | 'dots' | 'progress';
  }


  type MobileStepperClassKey =
    | PaperClassKey
    | 'positionBottom'
    | 'positionTop'
    | 'positionStatic'
    | 'dots'
    | 'dot'
    | 'dotActive'
    | 'progress';


  //************* mui/material-ui/Radio/Radio


  interface RadioProps extends StandardProps<SwitchBaseProps, RadioClassKey> { }


  type RadioClassKey = SwitchBaseClassKey;


  //************* mui/material-ui/Radio/RadioGroup


  interface RadioGroupProps
    extends StandardProps<FormGroupProps, RadioGroupClassKey, 'onChange'> {
    name?: string;
    onChange?: (event: React.ChangeEvent<{}>, value: string) => void;
    value?: string;
  }


  type RadioGroupClassKey = FormGroupClassKey;


  //************* mui/material-ui/Input/index


  //************* mui/material-ui/Menu/index


  //************* mui/material-ui/Select/Select


  interface SelectProps extends StandardProps<InputProps, SelectClassKey, 'value'> {
    autoWidth?: boolean;
    displayEmpty?: boolean;
    input?: React.ReactNode;
    MenuProps?: Partial<MenuProps>;
    multiple?: boolean;
    native?: boolean;
    onClose?: (event: React.ChangeEvent<{}>) => void;
    onOpen?: (event: React.ChangeEvent<{}>) => void;
    open?: boolean;
    renderValue?: (value: SelectProps['value']) => React.ReactNode;
    value?: Array<string | number> | string | number;
  }


  type SelectClassKey = 'root' | 'select' | 'selectMenu' | 'disabled' | 'icon';


  //************* mui/material-ui/Select/SelectInput


  interface SelectInputProps extends StandardProps<{}, SelectInputClassKey> {
    autoWidth: boolean;
    disabled?: boolean;
    inputRef?: (
      ref: HTMLSelectElement | { node: HTMLInputElement; value: SelectInputProps['value'] },
    ) => void;
    MenuProps?: Partial<MenuProps>;
    multiple: boolean;
    name?: string;
    native: boolean;
    onBlur?: React.FocusEventHandler<any>;
    onChange?: (event: React.ChangeEvent<{}>, child: React.ReactNode) => void;
    onClose?: (event: React.ChangeEvent<{}>) => void;
    onFocus?: React.FocusEventHandler<any>;
    onOpen?: (event: React.ChangeEvent<{}>) => void;
    open?: boolean;
    readOnly?: boolean;
    renderValue?: (value: SelectInputProps['value']) => React.ReactNode;
    value?: string | number | Array<string | number>;
  }


  type SelectInputClassKey = 'root' | 'select' | 'selectMenu' | 'disabled' | 'icon';


  //************* mui/material-ui/Snackbar/SnackbarContent


  interface SnackbarContentProps extends StandardProps<PaperProps, SnackbarContentClassKey> {
    action?: React.ReactElement<any>;
    message: React.ReactElement<any> | string;
  }


  type SnackbarContentClassKey = PaperClassKey | 'message' | 'action';


  //************* mui/material-ui/Snackbar/index


  //************* mui/material-ui/Snackbar/Snackbar


  type SnackBarOrigin = {
    horizontal?: 'left' | 'center' | 'right' | number;
    vertical?: 'top' | 'center' | 'bottom' | number;
  };


  interface SnackbarProps
    extends StandardProps<
    React.HTMLAttributes<HTMLDivElement> & Partial<TransitionHandlers>,
    SnackbarClassKey
    > {
    action?: React.ReactElement<any> | React.ReactElement<any>[];
    anchorOrigin?: SnackBarOrigin;
    autoHideDuration?: number;
    message?: React.ReactElement<any>;
    onClose?: (event: React.SyntheticEvent<any>, reason: string) => void;
    onMouseEnter?: React.MouseEventHandler<any>;
    onMouseLeave?: React.MouseEventHandler<any>;
    open: boolean;
    resumeHideDuration?: number;
    SnackbarContentProps?: Partial<SnackbarContentProps>;
    transition?: React.ReactType;
    transitionDuration?: TransitionDuration;
  }


  type SnackbarClassKey =
    | 'root'
    | 'anchorTopCenter'
    | 'anchorBottomCenter'
    | 'anchorTopRight'
    | 'anchorBottomRight'
    | 'anchorTopLeft'
    | 'anchorBottomLeft';


  //************* mui/material-ui/SvgIcon/SvgIcon


  interface SvgIconProps
    extends StandardProps<React.SVGProps<SVGSVGElement>, SvgIconClassKey> {
    color?: PropTypes.Color | 'action' | 'disabled' | 'error';
    nativeColor?: string;
    titleAccess?: string;
    viewBox?: string;
  }


  type SvgIconClassKey =
    | 'root'
    | 'colorSecondary'
    | 'colorAction'
    | 'colorDisabled'
    | 'colorError'
    | 'colorPrimary'
    | 'fontSize';


  //************* mui/material-ui/Switch/Switch


  interface SwitchProps extends StandardProps<SwitchBaseProps, SwitchClassKey> { }


  type SwitchClassKey = SwitchBaseClassKey | 'bar' | 'icon';


  //************* mui/material-ui/Tabs/Tab


  interface TabProps extends StandardProps<ButtonBaseProps, TabClassKey, 'onChange'> {
    disabled?: boolean;
    fullWidth?: boolean;
    icon?: string | React.ReactElement<any>;
    value?: any;
    label?: React.ReactNode;
    onChange?: (event: React.ChangeEvent<{ checked: boolean }>, value: any) => void;
    onClick?: React.EventHandler<any>;
    selected?: boolean;
    style?: React.CSSProperties;
    textColor?: string | 'secondary' | 'primary' | 'inherit';
  }


  type TabClassKey =
    | ButtonBaseClassKey
    | 'rootLabelIcon'
    | 'rootPrimary'
    | 'rootPrimarySelected'
    | 'rootPrimaryDisabled'
    | 'rootSecondary'
    | 'rootSecondarySelected'
    | 'rootSecondaryDisabled'
    | 'rootInherit'
    | 'rootInheritSelected'
    | 'rootInheritDisabled'
    | 'fullWidth'
    | 'wrapper'
    | 'labelContainer'
    | 'label'
    | 'labelWrapped';


  //************* mui/material-ui/Tabs/TabIndicator


  interface TabIndicatorProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, TabIndicatorClassKey> {
    color: 'secondary' | 'primary' | string;
    style: { left: number; width: number };
  }


  type TabIndicatorClassKey = 'root' | 'colorSecondary' | 'colorPrimary';


  //************* mui/material-ui/Table/Table


  interface TableProps extends StandardProps<TableBaseProps, TableClassKey> {
    component?: React.ReactType<TableBaseProps>;
  }


  type TableBaseProps = React.TableHTMLAttributes<HTMLTableElement>;


  type TableClassKey = 'root';


  //************* mui/material-ui/Table/TableCell


	/**
	 * `<TableCell>` will be rendered as an `<th>`or `<td>` depending
	 * on the context it is used in. Where context literally is the
	 * React `context`.
	 *
	 * Since it is not decided via prop, we have create loose typings
	 * here.
	 */
  interface TableCellProps extends StandardProps<TableCellBaseProps, TableCellClassKey> {
    component?: React.ReactType<TableCellBaseProps>;
    numeric?: boolean;
    padding?: Padding;
    sortDirection?: SortDirection;
    type?: Type;
  }


  type TableCellBaseProps = React.ThHTMLAttributes<HTMLTableHeaderCellElement> &
    React.TdHTMLAttributes<HTMLTableDataCellElement>;


  type Padding = 'default' | 'checkbox' | 'dense' | 'none';


  type SortDirection = 'asc' | 'desc' | false;


  type Type = 'head' | 'body' | 'footer';


  type TableCellClassKey =
    | 'root'
    | 'numeric'
    | 'typeHead'
    | 'typeBody'
    | 'typeFooter'
    | 'paddingDefault'
    | 'paddingDense'
    | 'paddingCheckbox';


  //************* mui/material-ui/Table/TablePagination


  interface LabelDisplayedRowsArgs {
    from: number;
    to: number;
    count: number;
    page: number;
  }


  interface TablePaginationProps
    extends StandardProps<TablePaginationBaseProps, TablePaginationClassKey> {
    Actions?: React.ReactType<TablePaginationBaseProps>;
    backIconButtonProps?: IconButtonProps;
    component?: React.ReactType<TablePaginationBaseProps>;
    count: number;
    labelDisplayedRows?: (paginationInfo: LabelDisplayedRowsArgs) => React.ReactNode;
    labelRowsPerPage?: React.ReactNode;
    nextIconButtonProps?: IconButtonProps;
    onChangePage: (event: React.MouseEvent<HTMLButtonElement> | null, page: number) => void;
    onChangeRowsPerPage?: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;
    page: number;
    rowsPerPage: number;
    rowsPerPageOptions?: number[];
  }


  type TablePaginationBaseProps = TableCellProps;


  type TablePaginationClassKey =
    | TableCellClassKey
    | 'toolbar'
    | 'spacer'
    | 'caption'
    | 'input'
    | 'selectRoot'
    | 'select';


  //************* mui/material-ui/Table/TableRow


  interface TableRowProps extends StandardProps<TableRowBaseProps, TableRowClassKey> {
    component?: React.ReactType<TableRowBaseProps>;
    hover?: boolean;
    selected?: boolean;
  }


  type TableRowBaseProps = React.HTMLAttributes<HTMLTableRowElement>;


  type TableRowClassKey = 'root' | 'typeHead' | 'typeFooter' | 'hover' | 'selected';


  //************* mui/material-ui/Table/TableSortLabel


  interface TableSortLabelProps
    extends StandardProps<ButtonBaseProps, TableSortLabelClassKey> {
    active?: boolean;
    direction?: 'asc' | 'desc';
  }


  type TableSortLabelClassKey = ButtonBaseClassKey | 'active' | 'icon' | 'desc' | 'asc';


  //************* mui/material-ui/Tabs/Tabs


  interface TabsProps extends StandardProps<ButtonBaseProps, TabsClassKey, 'onChange'> {
    action?: (actions: TabsActions) => void;
    buttonClassName?: string;
    centered?: boolean;
    children?: React.ReactNode;
    fullWidth?: boolean;
    indicatorClassName?: string;
    indicatorColor?: 'secondary' | 'primary' | string;
    onChange?: (event: React.ChangeEvent<{}>, value: any) => void;
    scrollable?: boolean;
    scrollButtons?: 'auto' | 'on' | 'off';
    TabScrollButton?: React.ReactType;
    textColor?: 'secondary' | 'primary' | 'inherit' | string;
    value: any;
    width?: string;
  }


  type TabsClassKey =
    | ButtonBaseClassKey
    | 'flexContainer'
    | 'scrollingContainer'
    | 'fixed'
    | 'scrollable'
    | 'centered';


  interface TabsActions {
    updateIndicator(): void;
  }


  //************* mui/material-ui/Tabs/TabScrollButton


  interface TabScrollButtonProps
    extends StandardProps<ButtonBaseProps, TabScrollButtonClassKey> {
    direction?: 'left' | 'right';
    visible?: boolean;
  }


  type TabScrollButtonClassKey = ButtonBaseClassKey | 'root';


  //************* mui/material-ui/Input/Textarea


  interface TextareaProps
    extends StandardProps<
    React.TextareaHTMLAttributes<HTMLTextAreaElement>,
    TextareaClassKey,
    'rows'
    > {
    defaultValue?: any;
    disabled?: boolean;
    rows?: string | number;
    rowsMax?: string | number;
    textareaRef?: React.Ref<any>;
    value?: string;
  }


  type TextareaClassKey = 'root' | 'shadow' | 'textarea';


  //************* mui/material-ui/Toolbar/Toolbar


  interface ToolbarProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, ToolbarClassKey> {
    disableGutters?: boolean;
  }


  type ToolbarClassKey = 'root' | 'gutters';


  //************* mui/material-ui/Tooltip/Tooltip


  interface TooltipProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, TooltipClassKey, 'title'> {
    children: React.ReactElement<any>;
    disableTriggerFocus?: boolean;
    disableTriggerHover?: boolean;
    disableTriggerTouch?: boolean;
    enterDelay?: number;
    id?: string;
    leaveDelay?: number;
    onClose?: (event: React.ChangeEvent<{}>) => void;
    onOpen?: (event: React.ChangeEvent<{}>) => void;
    open?: boolean;
    placement?:
    | 'bottom-end'
    | 'bottom-start'
    | 'bottom'
    | 'left-end'
    | 'left-start'
    | 'left'
    | 'right-end'
    | 'right-start'
    | 'right'
    | 'top-end'
    | 'top-start'
    | 'top';
    PopperProps?: Partial<PopperProps>;
    title: React.ReactNode;
  }


  type TooltipClassKey =
    | 'root'
    | 'popper'
    | 'popperClose'
    | 'tooltip'
    | 'tooltipLeft'
    | 'tooltipRight'
    | 'tooltipTop'
    | 'tooltipBottom'
    | 'tooltipOpen';


  interface PopperProps extends ReactPopper.IPopperProps {
    PopperClassName: string;
  }


  //************* mui/material-ui/ButtonBase/TouchRipple


  interface TouchRippleProps
    extends StandardProps<TransitionGroup.TransitionGroupProps, TouchRippleClassKey> {
    center?: boolean;
  }


  type TouchRippleClassKey =
    | 'root'
    | 'wrapper'
    | 'wrapperLeaving'
    | 'wrapperPulsating'
    | 'ripple'
    | 'rippleVisible'
    | 'rippleFast';


  //************* mui/material-ui/Typography/Typography


  interface TypographyProps
    extends StandardProps<React.HTMLAttributes<HTMLElement>, TypographyClassKey> {
    align?: PropTypes.Alignment;
    color?: PropTypes.Color | 'textSecondary' | 'error';
    component?: React.ReactType<TypographyProps>;
    gutterBottom?: boolean;
    headlineMapping?: {[type in TextStyle]: string };
    noWrap?: boolean;
    paragraph?: boolean;
    variant?: Style | 'caption' | 'button';
  }


  type TypographyClassKey =
    | 'root'
    | 'display4'
    | 'display3'
    | 'display2'
    | 'display1'
    | 'headline'
    | 'title'
    | 'subheading'
    | 'body2'
    | 'body1'
    | 'caption'
    | 'button'
    | 'alignLeft'
    | 'alignCenter'
    | 'alignRight'
    | 'alignJustify'
    | 'noWrap'
    | 'gutterBottom'
    | 'paragraph'
    | 'colorInherit'
    | 'colorSecondary'
    | 'colorTextSecondary';


  //************* mui/material-ui/styles/overrides


  type Overrides = {
    [Name in keyof ComponentNameToClassKey]?: Partial<StyleRules<ComponentNameToClassKey[Name]>>
  };


  type ComponentNameToClassKey = {
    MuiAppBar: AppBarClassKey;
    MuiAvatar: AvatarClassKey;
    MuiBackdrop: BackdropClassKey;
    MuiBadge: BadgeClassKey;
    MuiBottomNavigation: BottomNavigationClassKey;
    MuiBottomNavigationAction: BottomNavigationActionClassKey;
    MuiButton: ButtonClassKey;
    MuiButtonBase: ButtonBaseClassKey;
    // MuiCard: CardClassKey;
    MuiCardActions: CardActionsClassKey;
    MuiCardContent: CardContentClassKey;
    MuiCardHeader: CardHeaderClassKey;
    MuiCardMedia: CardMediaClassKey;
    MuiCheckbox: CheckboxClassKey;
    MuiChip: ChipClassKey;
    MuiCircularProgress: CircularProgressClassKey;
    MuiCollapse: CollapseClassKey;
    MuiDialog: DialogClassKey;
    MuiDialogActions: DialogActionsClassKey;
    MuiDialogContent: DialogContentClassKey;
    MuiDialogContentText: DialogContentTextClassKey;
    MuiDialogTitle: DialogTitleClassKey;
    MuiDivider: DividerClassKey;
    MuiDrawer: DrawerClassKey;
    MuiFormControl: FormControlClassKey;
    MuiFormControlLabel: FormControlLabelClassKey;
    MuiFormGroup: FormGroupClassKey;
    MuiFormHelperText: FormHelperTextClassKey;
    MuiFormLabel: FormLabelClassKey;
    MuiGrid: GridClassKey;
    MuiGridList: GridListClassKey;
    MuiGridListTile: GridListTileClassKey;
    MuiGridListTileBar: GridListTileBarClassKey;
    MuiIcon: IconClassKey;
    MuiIconButton: IconButtonClassKey;
    MuiInput: InputClassKey;
    MuiInputAdornment: InputAdornmentClassKey;
    MuiInputLabel: InputLabelClassKey;
    MuiLinearProgress: LinearProgressClassKey;
    MuiList: ListClassKey;
    MuiListItem: ListItemClassKey;
    MuiListItemAvatar: ListItemAvatarClassKey;
    MuiListItemIcon: ListItemIconClassKey;
    MuiListItemSecondaryAction: ListItemSecondaryActionClassKey;
    MuiListItemText: ListItemTextClassKey;
    MuiListSubheader: ListSubheaderClassKey;
    MuiMenu: MenuClassKey;
    MuiMenuItem: MenuItemClassKey;
    // MuiMenuList: MenuListClassKey;
    MuiMobileStepper: MobileStepperClassKey;
    MuiModal: ModalClassKey;
    MuiPaper: PaperClassKey;
    MuiPopover: PopoverClassKey;
    MuiRadio: RadioClassKey;
    // MuiRadioGroup: RadioGroupClassKey;
    MuiSelect: SelectClassKey;
    // MuiSelectInput: SelectInputClassKey;
    MuiSnackbar: SnackbarClassKey;
    MuiSnackbarContent: SnackbarContentClassKey;
    MuiSvgIcon: SvgIconClassKey;
    MuiSwitchBase: SwitchBaseClassKey;
    MuiSwitch: SwitchClassKey;
    MuiTab: TabClassKey;
    MuiTabIndicator: TabIndicatorClassKey;
    MuiTable: TableClassKey;
    MuiTableCell: TableCellClassKey;
    MuiTablePagination: TablePaginationClassKey;
    MuiTableRow: TableRowClassKey;
    MuiTableSortLabel: TableSortLabelClassKey;
    MuiTabs: TabsClassKey;
    MuiTabScrollButton: TabScrollButtonClassKey;
    MuiTextarea: TextareaClassKey;
    // MuiTextField: TextFieldClassKey;
    MuiToolbar: ToolbarClassKey;
    MuiTooltip: TooltipClassKey;
    MuiTouchRipple: TouchRippleClassKey;
    MuiTypography: TypographyClassKey;
  };


  //************* mui/material-ui/styles/createMuiTheme


  type Direction = 'ltr' | 'rtl';


  interface ThemeOptions {
    direction?: Direction;
    palette?: PaletteOptions;
    typography?: TypographyOptions | ((palette: Palette) => TypographyOptions);
    mixins?: MixinsOptions;
    breakpoints?: BreakpointsOptions;
    shadows?: Shadows;
    transitions?: TransitionsOptions;
    spacing?: SpacingOptions;
    zIndex?: ZIndexOptions;
    overrides?: Overrides;
  }


  interface Theme {
    direction: Direction;
    palette: Palette;
    typography: Typography;
    mixins: Mixins;
    breakpoints: Breakpoints;
    shadows: Shadows;
    transitions: Transitions;
    spacing: Spacing;
    zIndex: ZIndex;
    overrides?: Overrides;
  }


  //************* mui/material-ui/styles/jssPreset


  //************* mui/material-ui/styles/MuiThemeProvider


  interface SheetManagerTheme {
    refs: number;
    sheet: JSS.StyleSheet<string>; //LM
  }


  interface MuiThemeProviderProps {
    theme: Theme | ((outer: Theme | null) => Theme);
    sheetsManager?: Map<StylesCreator, Map<Theme, SheetManagerTheme>>;
    children: React.ReactNode;
  }


  //************* mui/material-ui/styles/withTheme


  interface WithTheme {
    theme: Theme;
  }


  //************* mui/material-ui/styles/index


  //************* mui/material-ui/AppBar/index


  //************* mui/material-ui/Avatar/index


  //************* mui/material-ui/Badge/index


  //************* mui/material-ui/BottomNavigation/index


  //************* mui/material-ui/Card/index


  //************* mui/material-ui/Checkbox/index


  //************* mui/material-ui/Chip/index


  //************* mui/material-ui/utils/ClickAwayListener


  interface ClickAwayListenerProps {
    children: React.ReactNode;
    onClickAway: (event: React.ChangeEvent<{}>) => void;
  }


  //************* mui/material-ui/utils/withWidth


  interface WithWidthOptions {
    resizeInterval: number;
  }


  interface WithWidthProps {
    width: Breakpoint;
  }


  //************* mui/material-ui/Dialog/withMobileDialog


  interface WithMobileDialogOptions {
    breakpoint: Breakpoint;
  }


  interface InjectedProps {
    fullScreen?: boolean;
  }


  //************* mui/material-ui/Dialog/index


  //************* mui/material-ui/Divider/index


  //************* mui/material-ui/Drawer/index


  //************* mui/material-ui/ExpansionPanel/ExpansionPanel


  interface ExpansionPanelProps
    extends StandardProps<PaperProps, ExpansionPanelClassKey, 'onChange'> {
    CollapseProps?: React.ComponentType<CollapseProps>;
    defaultExpanded?: boolean;
    disabled?: boolean;
    expanded?: boolean;
    onChange?: (event: React.ChangeEvent<{}>, expanded: boolean) => void;
  }


  type ExpansionPanelClassKey = PaperClassKey | 'disabled' | 'expanded';


  //************* mui/material-ui/ExpansionPanel/ExpansionPanelSummary


  interface ExpansionPanelSummaryProps
    extends StandardProps<ButtonBaseProps, ExpansionPanelSummaryClassKey> {
    disabled?: boolean;
    expanded?: boolean;
    expandIcon?: React.ReactNode;
    onChange?: React.ReactEventHandler<{}>;
  }


  type ExpansionPanelSummaryClassKey =
    | ButtonBaseClassKey
    | 'expanded'
    | 'focused'
    | 'disabled'
    | 'content'
    | 'contentExpanded'
    | 'expandIcon'
    | 'expandIconExpanded';


  //************* mui/material-ui/ExpansionPanel/ExpansionPanelDetails


  interface ExpansionPanelDetailsProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, ExpansionPanelDetailsClassKey> { }


  type ExpansionPanelDetailsClassKey = 'root';


  //************* mui/material-ui/ExpansionPanel/ExpansionPanelActions


  interface ExpansionPanelActionsProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, ExpansionPanelActionsClassKey> { }


  type ExpansionPanelActionsClassKey = 'root' | 'action';


  //************* mui/material-ui/ExpansionPanel/index


  //************* mui/material-ui/Form/index


  //************* mui/material-ui/Hidden/index


  //************* mui/material-ui/Icon/index


  //************* mui/material-ui/Grid/index


  //************* mui/material-ui/GridList/index


  //************* mui/material-ui/MobileStepper/index


  //************* mui/material-ui/Progress/index


  //************* mui/material-ui/Radio/index


  //************* mui/material-ui/Reboot/Reboot


  interface RebootProps {
    children?: React.ReactElement<any>;
  }


  //************* mui/material-ui/Reboot/index


  //************* mui/material-ui/Select/index


  //************* mui/material-ui/Stepper/Stepper


  type Orientation = 'horizontal' | 'vertical';


  interface StepperProps extends StandardProps<PaperProps, StepperClasskey> {
    activeStep?: number;
    alternativeLabel?: boolean;
    children: React.ReactNode;
    connector?: React.ReactElement<any> | React.ReactNode;
    nonLinear?: boolean;
    orientation?: Orientation;
  }


  type StepperClasskey = PaperClassKey | 'root' | 'horizontal' | 'vertical';


  //************* mui/material-ui/Stepper/Step


  interface StepProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, StepClasskey> {
    active?: boolean;
    alternativeLabel?: boolean;
    children?: React.ReactNode;
    completed?: boolean;
    connector?: React.ReactElement<any>;
    disabled?: boolean;
    index?: number;
    last?: boolean;
    orientation?: Orientation;
  }


  type StepClasskey = 'root' | 'horizontal' | 'alternativeLabel';


  //************* mui/material-ui/Stepper/StepButton


  type StepButtonIcon = React.ReactElement<any> | string | number;


  interface StepButtonProps extends StandardProps<ButtonBaseProps, StepButtonClasskey> {
    active?: boolean;
    alternativeLabel?: boolean;
    completed?: boolean;
    disabled?: boolean;
    icon?: StepButtonIcon;
    last?: boolean;
    optional?: React.ReactNode;
    orientation?: Orientation;
  }


  type StepButtonClasskey = ButtonBaseClassKey | 'root' | 'alternativeLabel';


  //************* mui/material-ui/Stepper/StepContent


  interface StepContentProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, StepContentClasskey> {
    active?: boolean;
    alternativeLabel?: boolean;
    children: React.ReactNode;
    completed?: boolean;
    last?: boolean;
    optional?: boolean;
    orientation?: Orientation;
    transition?: React.ComponentType<TransitionProps>;
    transitionDuration?: TransitionDuration | 'auto';
  }


  type StepContentClasskey = 'root' | 'last' | 'transition';


  //************* mui/material-ui/Stepper/StepIcon


  interface StepIconProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, StepIconClasskey> {
    active?: boolean;
    completed?: boolean;
    icon: React.ReactNode;
  }


  type StepIconClasskey =
    | 'root'
    | 'completed';


  //************* mui/material-ui/Stepper/StepLabel


  interface StepLabelProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, StepLabelClasskey> {
    active?: boolean;
    alternativeLabel?: boolean;
    children: React.ReactNode;
    completed?: boolean;
    disabled?: boolean;
    icon?: StepButtonIcon;
    last?: boolean;
    optional?: React.ReactNode;
    orientation?: Orientation;
  }


  type StepLabelClasskey =
    | 'root'
    | 'horizontal'
    | 'vertical'
    | 'active'
    | 'completed'
    | 'disabled'
    | 'iconContainer'
    | 'iconContainerNoAlternative'
    | 'alternativeLabelRoot'
    | 'alternativeLabel';


  //************* mui/material-ui/Stepper/index


  //************* mui/material-ui/colors/amber


  //************* mui/material-ui/colors/blue


  //************* mui/material-ui/colors/blueGrey


  //************* mui/material-ui/colors/brown


  //************* mui/material-ui/colors/cyan


  //************* mui/material-ui/colors/deepOrange


  //************* mui/material-ui/colors/deepPurple


  //************* mui/material-ui/colors/green


  //************* mui/material-ui/colors/grey


  //************* mui/material-ui/colors/indigo


  //************* mui/material-ui/colors/lightBlue


  //************* mui/material-ui/colors/lightGreen


  //************* mui/material-ui/colors/lime


  //************* mui/material-ui/colors/orange


  //************* mui/material-ui/colors/pink


  //************* mui/material-ui/colors/purple


  //************* mui/material-ui/colors/red


  //************* mui/material-ui/colors/teal


  //************* mui/material-ui/colors/yellow


  //************* mui/material-ui/colors/index


  //************* mui/material-ui/SvgIcon/index


  //************* mui/material-ui/Switch/index


  //************* mui/material-ui/Table/TableFooter


  interface TableFooterProps extends TableFooterBaseProps {
    component?: React.ReactType<TableFooterBaseProps>;
  }


  type TableFooterBaseProps = React.HTMLAttributes<HTMLTableSectionElement>;


  //************* mui/material-ui/Table/TableHead


  interface TableHeadProps extends TableHeadBaseProps {
    component?: React.ReactType<TableHeadBaseProps>;
  }


  type TableHeadBaseProps = React.HTMLAttributes<HTMLTableSectionElement>;


  //************* mui/material-ui/Table/TableBody


  interface TableBodyProps extends TableBodyBaseProps {
    component?: React.ReactType<TableBodyBaseProps>;
  }


  type TableBodyBaseProps = React.HTMLAttributes<HTMLTableSectionElement>;


  //************* mui/material-ui/Table/index


  //************* mui/material-ui/Tabs/index


  //************* mui/material-ui/Typography/index


  //************* mui/material-ui/TextField/TextField


  interface TextFieldProps
    extends StandardProps<FormControlProps, TextFieldClassKey, 'onChange' | 'defaultValue'> {
    autoComplete?: string;
    autoFocus?: boolean;
    children?: React.ReactNode;
    defaultValue?: string | number;
    disabled?: boolean;
    error?: boolean;
    FormHelperTextProps?: FormHelperTextProps;
    fullWidth?: boolean;
    helperText?: React.ReactNode;
    helperTextClassName?: string;
    id?: string;
    InputLabelProps?: InputLabelProps;
    InputProps?: InputProps;
    inputProps?: InputProps['inputProps'];
    inputRef?: React.Ref<any>;
    label?: React.ReactNode;
    labelClassName?: string;
    margin?: PropTypes.Margin;
    multiline?: boolean;
    name?: string;
    onChange?: React.ChangeEventHandler<HTMLInputElement>;
    placeholder?: string;
    required?: boolean;
    rows?: string | number;
    rowsMax?: string | number;
    select?: boolean;
    SelectProps?: SelectProps;
    type?: string;
    value?: Array<string | number> | string | number;
  }


  type TextFieldClassKey = FormControlClassKey;


  //************* mui/material-ui/TextField/index


  //************* mui/material-ui/Toolbar/index


  //************* mui/material-ui/Tooltip/index


  //************* mui/material-ui/transitions/Grow


  interface GrowProps extends TransitionProps {
    theme?: Theme;
    timeout?: TransitionDuration | 'auto';
  }


  //************* mui/material-ui/transitions/Zoom


  interface ZoomProps extends TransitionProps {
    theme?: Theme;
    timeout?: TransitionDuration;
  }


  //************* mui/material-ui/transitions/index


  //************* mui/material-ui/index


	/**
	 * All standard components exposed by `material-ui` are `StyledComponents` with
	 * certain `classes`, on which one can also set a top-level `className` and inline
	 * `style`.
	 */
  type StandardProps<C, ClassKey extends string, Removals extends keyof C = never> = Omit<
    C & { classes: any },
    'classes' | Removals
    > &
    StyledComponentProps<ClassKey> & {
      className?: string;
      style?: Partial<React.CSSProperties>;
    };


  type PaletteType = 'light' | 'dark';

  interface Color {
    50: string;
    100: string;
    200: string;
    300: string;
    400: string;
    500: string;
    600: string;
    700: string;
    800: string;
    900: string;
    A100: string;
    A200: string;
    A400: string;
    A700: string;
  }


	/**
	 * Utilies types based on:
	 * https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-307871458
	 */

  /** @internal */
  type Diff<T extends string, U extends string> = ({[P in T]: P } &
    {[P in U]: never } & { [x: string]: never })[T];


  /** @internal */
  type Omit<T, K extends keyof T> = Pick<T, Diff<keyof T, K>>;


  namespace PropTypes {
    type Alignment = 'inherit' | 'left' | 'center' | 'right' | 'justify';
    type Color = 'inherit' | 'primary' | 'secondary' | 'default';
    type Margin = 'none' | 'dense' | 'normal';
  }


  //************* mui/material-ui/Hidden/HiddenCss


  interface HiddenCssProps {
    lgDown?: boolean;
    lgUp?: boolean;
    mdDown?: boolean;
    mdUp?: boolean;
    only?: Breakpoint | Array<Breakpoint>;
    smDown?: boolean;
    smUp?: boolean;
    xlDown?: boolean;
    xlUp?: boolean;
    xsDown?: boolean;
    xsUp?: boolean;
  }


  //************* mui/material-ui/Hidden/HiddenJs


  interface HiddenJsProps {
    initialWidth?: Breakpoint;
    lgDown?: boolean;
    lgUp?: boolean;
    mdDown?: boolean;
    mdUp?: boolean;
    only?: Breakpoint | Array<Breakpoint>;
    smDown?: boolean;
    smUp?: boolean;
    xlDown?: boolean;
    xlUp?: boolean;
    xsDown?: boolean;
    xsUp?: boolean;
  }


  //************* mui/material-ui/Modal/manageAriaHidden


  //************* mui/material-ui/Stepper/StepConnector


  type StepConnectorIcon = React.ReactElement<any> | string | number;


  interface StepConnectorProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, StepConnectorClasskey> {
    alternativeLabel?: boolean;
    orientation?: Orientation;
  }


  type StepConnectorClasskey = 'root' | 'alternativeLabel';


  //************* mui/material-ui/styles/colorManipulator
  type ColorFormat = 'rgb' | 'rgba' | 'hsl' | 'hsla';

  interface ColorObject {
    type: ColorFormat;
    values: [number, number, number] | [number, number, number, number];
  }


  //************* mui/material-ui/styles/themeListener
  // This is using the API from https://github.com/vesparny/brcast
  interface Broadcast<S> {
    setState(state: S): void;
    getState(): S;
    subscribe(callback: (state: S) => void): number;
    unsubscribe(subscriptionId: number): void;
  }


  interface MuiContext<S> {
    __THEMING__?: Broadcast<S>;
  }


  interface ThemeListener<S = {}> {
    initial(context: MuiContext<S>): S | null;
    subscribe(context: MuiContext<S>, callback: (state: S) => void): number | null;
    unsubscribe(context: MuiContext<S>, subscriptionId: number): void;
  }


  //************* mui/material-ui/Table/TablePaginationActions


  interface TablePaginationActionsProps
    extends StandardProps<React.HTMLAttributes<HTMLDivElement>, TablePaginationActionsClassKey> {
    backIconButtonProps?: IconButtonProps;
    count: number;
    nextIconButtonProps?: IconButtonProps;
    onChangePage: (event: React.MouseEvent<HTMLButtonElement> | null, page: number) => void;
    page: number;
    rowsPerPage: number;
  }


  type TablePaginationActionsClassKey = 'root';


  //************* mui/material-ui/test-utils/createMount


  interface MountOptions {
    mount: typeof mount;
  }


  //************* mui/material-ui/test-utils/createRender


  interface RenderOptions {
    render: typeof render;
  }


  //************* mui/material-ui/test-utils/createShallow


  interface ShallowOptions {
    shallow: typeof shallow;
    dive: boolean;
    untilSelector: EnzymeSelector;
  }


  //************* mui/material-ui/test-utils/getClasses


  //************* mui/material-ui/test-utils/index


  //************* mui/material-ui/test-utils/until


  //************* mui/material-ui/test-utils/unwrap


  //************* mui/material-ui/utils/addEventListener


  //************* mui/material-ui/utils/helpers


  type ChainedFunction = ((...args: any[]) => void) | undefined | null;


  //************* mui/material-ui/utils/keyboardFocus


  //************* mui/material-ui/utils/reactHelpers


  type NamedMuiComponent = React.ComponentType<{}> & { muiName: string };


  interface NamedMuiElement {
    type: NamedMuiComponent;
    props: StandardProps<{}, never>;
    key: string | number | null;
  }


  //************* mui/material-ui/utils/requirePropFactory
}
