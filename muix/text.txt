"import React from "react";
import PropTypes from "prop-types";
import withStyles from "material-ui/styles/withStyles";
import { fade } from "material-ui/styles/colorManipulator";
import ButtonBase from "material-ui/ButtonBase";
import { capitalize } from "material-ui/utils/helpers";
export const styles = theme => ({
  containedSecondary: {
    color: theme.palette.secondary.contrastText,
    backgroundColor: theme.palette.secondary.main,
    "&:hover": {
      backgroundColor: theme.palette.secondary.dark,
      "@media (hover: none)": { backgroundColor: theme.palette.secondary.main }
    }
  },
  root: {
    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,
    ...theme.typography.button,
    boxSizing: "border-box",
    minWidth: theme.spacing.unit * 11,
    minHeight: 36,
    lineHeight: "1.4em",
    borderRadius: 4,
    color: theme.palette.text.primary,
    transition: theme.transitions.create(["background-color", "box-shadow"], {
      duration: theme.transitions.duration.short
    }),
    "&:hover": {
      textDecoration: "none",
      backgroundColor: fade(
        theme.palette.text.primary,
        theme.palette.action.hoverOpacity
      ),
      "@media (hover: none)": { backgroundColor: "transparent" },
      "&$disabled": { backgroundColor: "transparent" }
    },
    "&$disabled": { color: theme.palette.action.disabled }
  },
  textPrimary: {
    color: theme.palette.primary.main,
    "&:hover": {
      backgroundColor: fade(
        theme.palette.primary.main,
        theme.palette.action.hoverOpacity
      ),
      "@media (hover: none)": { backgroundColor: "transparent" }
    }
  },
  textSecondary: {
    color: theme.palette.secondary.main,
    "&:hover": {
      backgroundColor: fade(
        theme.palette.secondary.main,
        theme.palette.action.hoverOpacity
      ),
      "@media (hover: none)": { backgroundColor: "transparent" }
    }
  },
  flat: {},
  flatPrimary: {},
  flatSecondary: {},
  outlined: {
    border: `1px solid ${
      theme.palette.type === "light"
        ? "rgba(0, 0, 0, 0.23)"
        : "rgba(255, 255, 255, 0.23)"
    }`
  },
  colorInherit: { color: "inherit" },
  contained: {
    color: theme.palette.getContrastText(theme.palette.grey[300]),
    backgroundColor: theme.palette.grey[300],
    boxShadow: theme.shadows[2],
    "&$focusVisible": { boxShadow: theme.shadows[6] },
    "&:active": { boxShadow: theme.shadows[8] },
    "&$disabled": {
      color: theme.palette.action.disabled,
      boxShadow: theme.shadows[0],
      backgroundColor: theme.palette.action.disabledBackground
    },
    "&:hover": {
      backgroundColor: theme.palette.grey.A100,
      "@media (hover: none)": { backgroundColor: theme.palette.grey[300] },
      "&$disabled": { backgroundColor: theme.palette.action.disabledBackground }
    }
  },
  containedPrimary: {
    color: theme.palette.primary.contrastText,
    backgroundColor: theme.palette.primary.main,
    "&:hover": {
      backgroundColor: theme.palette.primary.dark,
      "@media (hover: none)": { backgroundColor: theme.palette.primary.main }
    }
  },
  label: {
    width: "100%",
    display: "inherit",
    alignItems: "inherit",
    justifyContent: "inherit"
  },
  raised: {},
  raisedPrimary: {},
  raisedSecondary: {},
  focusVisible: {},
  disabled: {},
  fab: {
    borderRadius: "50%",
    padding: 0,
    minWidth: 0,
    width: 56,
    fontSize: 24,
    height: 56,
    boxShadow: theme.shadows[6],
    "&:active": { boxShadow: theme.shadows[12] }
  },
  mini: { width: 40, height: 40 },
  sizeSmall: {
    padding: `${theme.spacing.unit - 1}px ${theme.spacing.unit}px`,
    minWidth: theme.spacing.unit * 8,
    minHeight: 32,
    fontSize: theme.typography.pxToRem(13)
  },
  sizeLarge: {
    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 3}px`,
    minWidth: theme.spacing.unit * 14,
    minHeight: 40,
    fontSize: theme.typography.pxToRem(15)
  },
  fullWidth: { width: "100%" }
});
function Button(props) {
  const {
    disableFocusRipple,
    classNames,
    classes,
    className: classNameProp,
    color,
    disabled,
    children,
    fullWidth,
    focusVisibleClassName,
    mini,
    size,
    variant,
    ...other
  } = props;
  const fab = variant === "fab";
  const contained = variant === "contained" || variant === "raised";
  const text = !contained && !fab;
  const className = classNames(
    classes.root,
    {
      [classes.containedPrimary]: !text && color === "primary",
      [classes.contained]: contained || fab,
      [classes.mini]: fab && mini,
      [classes.colorInherit]: color === "inherit",
      [classes.textPrimary]: text && color === "primary",
      [classes.textSecondary]: text && color === "secondary",
      [classes.flat]: text,
      [classes.flatPrimary]: text && color === "primary",
      [classes.flatSecondary]: text && color === "secondary",
      [classes.fab]: fab,
      [classes.containedSecondary]: !text && color === "secondary",
      [classes.raised]: contained || fab,
      [classes.raisedPrimary]: (contained || fab) && color === "primary",
      [classes.raisedSecondary]: (contained || fab) && color === "secondary",
      [classes.text]: variant === "text",
      [classes.outlined]: variant === "outlined",
      [classes[`size${capitalize(size)}`]]: size !== "medium",
      [classes.disabled]: disabled,
      [classes.fullWidth]: fullWidth
    },
    classNameProp
  );
  return (
    <ButtonBase
      className={className}
      disabled={disabled}
      focusRipple={!disableFocusRipple}
      focusVisibleClassName={classNames(
        classes.focusVisible,
        focusVisibleClassName
      )}
      {...other}
    >
      <span className={classNames(classes.label)}>{children}</span>
    </ButtonBase>
  );
}
Button.propTypes = {
  disableRipple: PropTypes.bool,
  children: PropTypes.node.isRequired,
  className: PropTypes.string,
  color: PropTypes.oneOf(["default", "inherit", "primary", "secondary"]),
  component: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.func,
    PropTypes.object
  ]),
  disabled: PropTypes.bool,
  disableFocusRipple: PropTypes.bool,
  classes: PropTypes.object.isRequired,
  focusVisibleClassName: PropTypes.string,
  fullWidth: PropTypes.bool,
  href: PropTypes.string,
  mini: PropTypes.bool,
  size: PropTypes.oneOf(["small", "medium", "large"]),
  type: PropTypes.string,
  variant: PropTypes.oneOf([
    "text",
    "flat",
    "outlined",
    "contained",
    "raised",
    "fab"
  ])
};
Button.defaultProps = {
  color: "default",
  component: "button",
  disabled: false,
  disableFocusRipple: false,
  fullWidth: false,
  mini: false,
  size: "medium",
  type: "button",
  variant: "text"
};
export default withStyles(styles, { name: "MuiButton" })(Button);
"