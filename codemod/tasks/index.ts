import * as fs from 'fs'
import * as Config from '../utils/config'
import * as Queries from '../utils/queries'
import * as Ast from '../utils/ast'
import * as Parser from '../utils/parser'
import * as fsExtra from 'fs-extra';
import { readAllCodes, scanDir } from '../utils/readAllCodes'
import { transformAstCode } from './ast-comp'
import { transformStrCode } from './str-comp'

export const typeDefs = () => {
    scanDir(Config.patchOriginal, '/**/*.d.ts').forEach(src => {
        if (!src.startsWith('utils')) return
        const dest = src.replace('.d.ts', '.ts')
        let code = fs.readFileSync(Config.patchOriginal + src, { encoding: 'utf-8' })
        code = code.replace(/^declare .*$/gm, '')
        code = code.replace(/^export default .*$/gm, '')
        //fsExtra.outputFileSync(Config.muiWeb + dest, code, { flag: 'w' });
    })
}

export const codeMod = () => {

    try { fsExtra.emptyDirSync(Config.muiWeb) } catch { }

    fsExtra.copySync(Config.muix_WebSources, Config.muiWeb, { overwrite: true })

    //typeDefs()

    const { log, codeStr } = readAllCodes()

    for (const path in log) {
        const logp = log[path]

        if (logp.nameIsUppercase || (logp.dirIsUppercase && logp.name === 'index')) continue

        let code = codeStr[path]

        logp.withTheme = code.indexOf('withTheme(') > 0
        if (!logp.withTheme) logp.withStyles = code.indexOf('withStyles(styles') > 0

        const dtsFn = Config.patchOriginal + path + '.d.ts'
        const dts = fs.existsSync(dtsFn) ? fs.readFileSync(dtsFn, { encoding: 'utf-8' }) : null

        code = transformStrCode(code, logp, dts, allAstTypes)

        const ast = Parser.parseCode(code)

        // finish logItem
        logp.renderFunc = Queries.getNode_functionGlobal(ast, logp.name, true)
        if (!logp.renderFunc) {
            logp.renderFunc = Queries.getNode_classMethod(ast, logp.name, 'render', true)
            if (logp.renderFunc)
                logp.isClass = true
        }


        transformAstCode(ast, logp)

        Parser.generateFile(ast, logp.destPath + '.tsx')

        // TS shape
        if (logp.withStyles && logp.name !== 'SwipeArea') {
            console.log(path)
            const ts = Config.muiWeb + path + '.d.ts'
            const ts_ = ts.replace('.d.ts', '_.d.ts')
            if (!fs.existsSync(ts_))
                fsExtra.moveSync(ts, ts_)
            fsExtra.outputFileSync(ts, tsShape(logp, !noKey[logp.name]), { flag: 'w' })
            // export TS
            fsExtra.outputFileSync(Config.muix_Web + path + '.ts',
                `${Config.msgAutoGenerated}
import Component from 'reactxx-mui-web/${logp.dir}/${logp.name}'

export * from 'reactxx-mui-web/${logp.dir}/${logp.name}'
export default Component
`, { flag: 'w' })
        } else if (logp.nameIsUppercase) {
            // export TS
            fsExtra.outputFileSync(Config.muix_Web + path + '.ts',
                `${Config.msgAutoGenerated}
import Component from 'reactxx-mui-web/${logp.dir}/${logp.name}'

export * from 'reactxx-mui-web/${logp.dir}/${logp.name}'
export default Component
`, { flag: 'w' })
        }
    }

    fsExtra.copySync(Config.muix_WebSources, Config.muiWeb, { overwrite: true })

}

// const tsProps = (dir: string, name: string) => `
// export { ${name}Props } from '../../mui-typings/${dir}/${name}';
// `
const tsShape = (info: Ast.MUISourceInfo, hasClassKey?: boolean) =>
    `${Config.msgAutoGenerated}
import { TCommon, Types, TProvider, WithStyleCreator as TWithStyleCreator } from 'reactxx-basic';
import { Theme } from '../styles/withStyles';
import { ${hasClassKey ? `${info.name}ClassKey, ` : ''}${info.name}Props } from './${info.name}_';

export * from './${info.name}_';
export type Shape = Types.OverwriteShape<{
  ${hasClassKey ? `common: TCommon.ShapeTexts<${info.name}ClassKey>,` : ''}
  props: ${info.name}Props,
  theme: Theme
}>
export type ComponentType = React.ComponentClass<Types.PropsX<Shape>> & TProvider<Shape>
export type CodeComponentType = Types.CodeComponentType<Shape>
export type SheetCreatorX = Types.SheetCreatorX<Shape>
export type PropsX = Types.PropsX<Shape>
export type WithStyleCreator = TWithStyleCreator<Shape>

export declare const styles: SheetCreatorX
export declare const defaultProps: PropsX
export declare const ${info.name}Code: CodeComponentType

declare const ${info.name}: React.${info.isClass ? 'ComponentClass' : 'ComponentType'}<PropsX>
export default ${info.name}
`
const noKey = {
    'Stepper': true,
    'StepLabel': true,
    'Step': true,
    'StepIcon': true,
    'StepContent': true,
    'StepConnector': true,
    'StepButton': true,
    'HiddenCss': true,
}


const allAstTypes = {}